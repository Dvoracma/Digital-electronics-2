
bin/Debug/gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000622  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000006b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000006d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000462  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c2  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a1  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f7  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  78:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/* Includes ----------------------------------------------------------*/
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <GPIO_config_output+0x6>
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	9a 83       	std	Y+2, r25	; 0x02
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name | (1<<pin_num);
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	fc 01       	movw	r30, r24
  98:	80 81       	ld	r24, Z
  9a:	48 2f       	mov	r20, r24
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	28 2f       	mov	r18, r24
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <GPIO_config_output+0x2c>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	2a 95       	dec	r18
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <GPIO_config_output+0x28>
  b0:	84 2b       	or	r24, r20
  b2:	28 2f       	mov	r18, r24
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
}
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <GPIO_config_input_nopull>:

/*--------------------------------------------------------------------*/
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <GPIO_config_input_nopull+0x6>
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	9a 81       	ldd	r25, Y+2	; 0x02
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_config_input_nopull+0x2c>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_config_input_nopull+0x28>
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	28 2f       	mov	r18, r24
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
    *reg_name++;                    // Change pointer to Data Register
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	9c 01       	movw	r18, r24
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	3a 83       	std	Y+2, r19	; 0x02
 112:	29 83       	std	Y+1, r18	; 0x01
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	48 2f       	mov	r20, r24
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <GPIO_config_input_nopull+0x6a>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	2a 95       	dec	r18
 134:	e2 f7       	brpl	.-8      	; 0x12e <GPIO_config_input_nopull+0x66>
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	28 2f       	mov	r18, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <GPIO_config_input_pullup>:

/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <GPIO_config_input_pullup+0x6>
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <GPIO_config_input_pullup+0x2c>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	2a 95       	dec	r18
 17e:	e2 f7       	brpl	.-8      	; 0x178 <GPIO_config_input_pullup+0x28>
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	28 2f       	mov	r18, r24
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
    *reg_name++;                    // Change pointer to Data Register
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	9c 01       	movw	r18, r24
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	3a 83       	std	Y+2, r19	; 0x02
 19a:	29 83       	std	Y+1, r18	; 0x01
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_config_input_pullup+0x6a>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_config_input_pullup+0x66>
 1be:	84 2b       	or	r24, r20
 1c0:	28 2f       	mov	r18, r24
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
}
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <GPIO_write_low>:

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <GPIO_write_low+0x6>
 1dc:	1f 92       	push	r1
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	9a 83       	std	Y+2, r25	; 0x02
 1e4:	89 83       	std	Y+1, r24	; 0x01
 1e6:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_write_low+0x2c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_write_low+0x28>
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	28 2f       	mov	r18, r24
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
}
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <GPIO_write_high+0x6>
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	9a 83       	std	Y+2, r25	; 0x02
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name | (1<<pin_num);
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	9a 81       	ldd	r25, Y+2	; 0x02
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_write_high+0x2c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_write_high+0x28>
 250:	84 2b       	or	r24, r20
 252:	28 2f       	mov	r18, r24
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <GPIO_toggle>:

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <GPIO_toggle+0x6>
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name ^ (1<<pin_num);
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	9a 81       	ldd	r25, Y+2	; 0x02
 27e:	fc 01       	movw	r30, r24
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <GPIO_toggle+0x2c>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <GPIO_toggle+0x28>
 298:	84 27       	eor	r24, r20
 29a:	28 2f       	mov	r18, r24
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <main>:
 * Main function where the program execution begins. Toggle two LEDs
 * when a push button is pressed. Functions from user-defined GPIO
 * library is used instead of low-level logic operations.
 */
int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	2e 97       	sbiw	r28, 0x0e	; 14
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
    /* GREEN LED */
    GPIO_config_output(&DDRB, LED_GREEN);
 2c4:	65 e0       	ldi	r22, 0x05	; 5
 2c6:	84 e2       	ldi	r24, 0x24	; 36
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_GREEN);
 2ce:	65 e0       	ldi	r22, 0x05	; 5
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_write_low>

    /* RED LED */
    GPIO_config_output(&DDRC, LED_RED);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	87 e2       	ldi	r24, 0x27	; 39
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_high(&PORTC, LED_RED);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_write_high>

    /* push button */
    GPIO_config_input_pullup(&DDRD, BTN);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	8a e2       	ldi	r24, 0x2A	; 42
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 a8 00 	call	0x150	; 0x150 <GPIO_config_input_pullup>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	aa ef       	ldi	r26, 0xFA	; 250
 2fc:	b3 e4       	ldi	r27, 0x43	; 67
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	ab 83       	std	Y+3, r26	; 0x03
 304:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	4a e7       	ldi	r20, 0x7A	; 122
 30c:	55 e4       	ldi	r21, 0x45	; 69
 30e:	69 81       	ldd	r22, Y+1	; 0x01
 310:	7a 81       	ldd	r23, Y+2	; 0x02
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 31a:	dc 01       	movw	r26, r24
 31c:	cb 01       	movw	r24, r22
 31e:	8d 83       	std	Y+5, r24	; 0x05
 320:	9e 83       	std	Y+6, r25	; 0x06
 322:	af 83       	std	Y+7, r26	; 0x07
 324:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e8       	ldi	r20, 0x80	; 128
 32c:	5f e3       	ldi	r21, 0x3F	; 63
 32e:	6d 81       	ldd	r22, Y+5	; 0x05
 330:	7e 81       	ldd	r23, Y+6	; 0x06
 332:	8f 81       	ldd	r24, Y+7	; 0x07
 334:	98 85       	ldd	r25, Y+8	; 0x08
 336:	0e 94 03 02 	call	0x406	; 0x406 <__cmpsf2>
 33a:	88 23       	and	r24, r24
 33c:	2c f4       	brge	.+10     	; 0x348 <main+0x98>
		__ticks = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	9a 87       	std	Y+10, r25	; 0x0a
 344:	89 87       	std	Y+9, r24	; 0x09
 346:	3f c0       	rjmp	.+126    	; 0x3c6 <main+0x116>
	else if (__tmp > 65535)
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	3f ef       	ldi	r19, 0xFF	; 255
 34c:	4f e7       	ldi	r20, 0x7F	; 127
 34e:	57 e4       	ldi	r21, 0x47	; 71
 350:	6d 81       	ldd	r22, Y+5	; 0x05
 352:	7e 81       	ldd	r23, Y+6	; 0x06
 354:	8f 81       	ldd	r24, Y+7	; 0x07
 356:	98 85       	ldd	r25, Y+8	; 0x08
 358:	0e 94 80 02 	call	0x500	; 0x500 <__gesf2>
 35c:	18 16       	cp	r1, r24
 35e:	4c f5       	brge	.+82     	; 0x3b2 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e2       	ldi	r20, 0x20	; 32
 366:	51 e4       	ldi	r21, 0x41	; 65
 368:	69 81       	ldd	r22, Y+1	; 0x01
 36a:	7a 81       	ldd	r23, Y+2	; 0x02
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	9c 81       	ldd	r25, Y+4	; 0x04
 370:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 374:	dc 01       	movw	r26, r24
 376:	cb 01       	movw	r24, r22
 378:	bc 01       	movw	r22, r24
 37a:	cd 01       	movw	r24, r26
 37c:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 380:	dc 01       	movw	r26, r24
 382:	cb 01       	movw	r24, r22
 384:	9a 87       	std	Y+10, r25	; 0x0a
 386:	89 87       	std	Y+9, r24	; 0x09
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <main+0xf8>
 38a:	80 e9       	ldi	r24, 0x90	; 144
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	9c 87       	std	Y+12, r25	; 0x0c
 390:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 392:	8b 85       	ldd	r24, Y+11	; 0x0b
 394:	9c 85       	ldd	r25, Y+12	; 0x0c
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0xe6>
 39a:	9c 87       	std	Y+12, r25	; 0x0c
 39c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 39e:	89 85       	ldd	r24, Y+9	; 0x09
 3a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	9a 87       	std	Y+10, r25	; 0x0a
 3a6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a8:	89 85       	ldd	r24, Y+9	; 0x09
 3aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	69 f7       	brne	.-38     	; 0x38a <main+0xda>
 3b0:	14 c0       	rjmp	.+40     	; 0x3da <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3b2:	6d 81       	ldd	r22, Y+5	; 0x05
 3b4:	7e 81       	ldd	r23, Y+6	; 0x06
 3b6:	8f 81       	ldd	r24, Y+7	; 0x07
 3b8:	98 85       	ldd	r25, Y+8	; 0x08
 3ba:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 3be:	dc 01       	movw	r26, r24
 3c0:	cb 01       	movw	r24, r22
 3c2:	9a 87       	std	Y+10, r25	; 0x0a
 3c4:	89 87       	std	Y+9, r24	; 0x09
 3c6:	89 85       	ldd	r24, Y+9	; 0x09
 3c8:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ca:	9e 87       	std	Y+14, r25	; 0x0e
 3cc:	8d 87       	std	Y+13, r24	; 0x0d
 3ce:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d0:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x122>
 3d6:	9e 87       	std	Y+14, r25	; 0x0e
 3d8:	8d 87       	std	Y+13, r24	; 0x0d
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        if(bit_is_clear(PIND, BTN))
 3da:	89 e2       	ldi	r24, 0x29	; 41
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	99 27       	eor	r25, r25
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	59 f4       	brne	.+22     	; 0x404 <main+0x154>
        {
            GPIO_toggle(&PORTB, LED_GREEN);
 3ee:	65 e0       	ldi	r22, 0x05	; 5
 3f0:	85 e2       	ldi	r24, 0x25	; 37
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_toggle>
            GPIO_toggle(&PORTC, LED_RED);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	88 e2       	ldi	r24, 0x28	; 40
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_toggle>
        }
    }
 402:	79 cf       	rjmp	.-270    	; 0x2f6 <main+0x46>
 404:	78 cf       	rjmp	.-272    	; 0x2f6 <main+0x46>

00000406 <__cmpsf2>:
 406:	2f d0       	rcall	.+94     	; 0x466 <__fp_cmp>
 408:	08 f4       	brcc	.+2      	; 0x40c <__cmpsf2+0x6>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret

0000040e <__fixunssfsi>:
 40e:	57 d0       	rcall	.+174    	; 0x4be <__fp_splitA>
 410:	88 f0       	brcs	.+34     	; 0x434 <__fixunssfsi+0x26>
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	90 f0       	brcs	.+36     	; 0x43a <__fixunssfsi+0x2c>
 416:	b9 2f       	mov	r27, r25
 418:	99 27       	eor	r25, r25
 41a:	b7 51       	subi	r27, 0x17	; 23
 41c:	a0 f0       	brcs	.+40     	; 0x446 <__fixunssfsi+0x38>
 41e:	d1 f0       	breq	.+52     	; 0x454 <__fixunssfsi+0x46>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a f0       	brmi	.+6      	; 0x430 <__fixunssfsi+0x22>
 42a:	ba 95       	dec	r27
 42c:	c9 f7       	brne	.-14     	; 0x420 <__fixunssfsi+0x12>
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__fixunssfsi+0x46>
 430:	b1 30       	cpi	r27, 0x01	; 1
 432:	81 f0       	breq	.+32     	; 0x454 <__fixunssfsi+0x46>
 434:	5e d0       	rcall	.+188    	; 0x4f2 <__fp_zero>
 436:	b1 e0       	ldi	r27, 0x01	; 1
 438:	08 95       	ret
 43a:	5b c0       	rjmp	.+182    	; 0x4f2 <__fp_zero>
 43c:	67 2f       	mov	r22, r23
 43e:	78 2f       	mov	r23, r24
 440:	88 27       	eor	r24, r24
 442:	b8 5f       	subi	r27, 0xF8	; 248
 444:	39 f0       	breq	.+14     	; 0x454 <__fixunssfsi+0x46>
 446:	b9 3f       	cpi	r27, 0xF9	; 249
 448:	cc f3       	brlt	.-14     	; 0x43c <__fixunssfsi+0x2e>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b3 95       	inc	r27
 452:	d9 f7       	brne	.-10     	; 0x44a <__fixunssfsi+0x3c>
 454:	3e f4       	brtc	.+14     	; 0x464 <__fixunssfsi+0x56>
 456:	90 95       	com	r25
 458:	80 95       	com	r24
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <__fp_cmp>:
 466:	99 0f       	add	r25, r25
 468:	00 08       	sbc	r0, r0
 46a:	55 0f       	add	r21, r21
 46c:	aa 0b       	sbc	r26, r26
 46e:	e0 e8       	ldi	r30, 0x80	; 128
 470:	fe ef       	ldi	r31, 0xFE	; 254
 472:	16 16       	cp	r1, r22
 474:	17 06       	cpc	r1, r23
 476:	e8 07       	cpc	r30, r24
 478:	f9 07       	cpc	r31, r25
 47a:	c0 f0       	brcs	.+48     	; 0x4ac <__fp_cmp+0x46>
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	e4 07       	cpc	r30, r20
 482:	f5 07       	cpc	r31, r21
 484:	98 f0       	brcs	.+38     	; 0x4ac <__fp_cmp+0x46>
 486:	62 1b       	sub	r22, r18
 488:	73 0b       	sbc	r23, r19
 48a:	84 0b       	sbc	r24, r20
 48c:	95 0b       	sbc	r25, r21
 48e:	39 f4       	brne	.+14     	; 0x49e <__fp_cmp+0x38>
 490:	0a 26       	eor	r0, r26
 492:	61 f0       	breq	.+24     	; 0x4ac <__fp_cmp+0x46>
 494:	23 2b       	or	r18, r19
 496:	24 2b       	or	r18, r20
 498:	25 2b       	or	r18, r21
 49a:	21 f4       	brne	.+8      	; 0x4a4 <__fp_cmp+0x3e>
 49c:	08 95       	ret
 49e:	0a 26       	eor	r0, r26
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <__fp_cmp+0x3e>
 4a2:	a1 40       	sbci	r26, 0x01	; 1
 4a4:	a6 95       	lsr	r26
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	81 1d       	adc	r24, r1
 4aa:	81 1d       	adc	r24, r1
 4ac:	08 95       	ret

000004ae <__fp_split3>:
 4ae:	57 fd       	sbrc	r21, 7
 4b0:	90 58       	subi	r25, 0x80	; 128
 4b2:	44 0f       	add	r20, r20
 4b4:	55 1f       	adc	r21, r21
 4b6:	59 f0       	breq	.+22     	; 0x4ce <__fp_splitA+0x10>
 4b8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__fp_splitA+0x1a>
 4bc:	47 95       	ror	r20

000004be <__fp_splitA>:
 4be:	88 0f       	add	r24, r24
 4c0:	97 fb       	bst	r25, 7
 4c2:	99 1f       	adc	r25, r25
 4c4:	61 f0       	breq	.+24     	; 0x4de <__fp_splitA+0x20>
 4c6:	9f 3f       	cpi	r25, 0xFF	; 255
 4c8:	79 f0       	breq	.+30     	; 0x4e8 <__fp_splitA+0x2a>
 4ca:	87 95       	ror	r24
 4cc:	08 95       	ret
 4ce:	12 16       	cp	r1, r18
 4d0:	13 06       	cpc	r1, r19
 4d2:	14 06       	cpc	r1, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	f2 cf       	rjmp	.-28     	; 0x4bc <__fp_split3+0xe>
 4d8:	46 95       	lsr	r20
 4da:	f1 df       	rcall	.-30     	; 0x4be <__fp_splitA>
 4dc:	08 c0       	rjmp	.+16     	; 0x4ee <__fp_splitA+0x30>
 4de:	16 16       	cp	r1, r22
 4e0:	17 06       	cpc	r1, r23
 4e2:	18 06       	cpc	r1, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	f1 cf       	rjmp	.-30     	; 0x4ca <__fp_splitA+0xc>
 4e8:	86 95       	lsr	r24
 4ea:	71 05       	cpc	r23, r1
 4ec:	61 05       	cpc	r22, r1
 4ee:	08 94       	sec
 4f0:	08 95       	ret

000004f2 <__fp_zero>:
 4f2:	e8 94       	clt

000004f4 <__fp_szero>:
 4f4:	bb 27       	eor	r27, r27
 4f6:	66 27       	eor	r22, r22
 4f8:	77 27       	eor	r23, r23
 4fa:	cb 01       	movw	r24, r22
 4fc:	97 f9       	bld	r25, 7
 4fe:	08 95       	ret

00000500 <__gesf2>:
 500:	b2 df       	rcall	.-156    	; 0x466 <__fp_cmp>
 502:	08 f4       	brcc	.+2      	; 0x506 <__gesf2+0x6>
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	08 95       	ret

00000508 <__mulsf3>:
 508:	0b d0       	rcall	.+22     	; 0x520 <__mulsf3x>
 50a:	78 c0       	rjmp	.+240    	; 0x5fc <__fp_round>
 50c:	69 d0       	rcall	.+210    	; 0x5e0 <__fp_pscA>
 50e:	28 f0       	brcs	.+10     	; 0x51a <__mulsf3+0x12>
 510:	6e d0       	rcall	.+220    	; 0x5ee <__fp_pscB>
 512:	18 f0       	brcs	.+6      	; 0x51a <__mulsf3+0x12>
 514:	95 23       	and	r25, r21
 516:	09 f0       	breq	.+2      	; 0x51a <__mulsf3+0x12>
 518:	5a c0       	rjmp	.+180    	; 0x5ce <__fp_inf>
 51a:	5f c0       	rjmp	.+190    	; 0x5da <__fp_nan>
 51c:	11 24       	eor	r1, r1
 51e:	ea cf       	rjmp	.-44     	; 0x4f4 <__fp_szero>

00000520 <__mulsf3x>:
 520:	c6 df       	rcall	.-116    	; 0x4ae <__fp_split3>
 522:	a0 f3       	brcs	.-24     	; 0x50c <__mulsf3+0x4>

00000524 <__mulsf3_pse>:
 524:	95 9f       	mul	r25, r21
 526:	d1 f3       	breq	.-12     	; 0x51c <__mulsf3+0x14>
 528:	95 0f       	add	r25, r21
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	55 1f       	adc	r21, r21
 52e:	62 9f       	mul	r22, r18
 530:	f0 01       	movw	r30, r0
 532:	72 9f       	mul	r23, r18
 534:	bb 27       	eor	r27, r27
 536:	f0 0d       	add	r31, r0
 538:	b1 1d       	adc	r27, r1
 53a:	63 9f       	mul	r22, r19
 53c:	aa 27       	eor	r26, r26
 53e:	f0 0d       	add	r31, r0
 540:	b1 1d       	adc	r27, r1
 542:	aa 1f       	adc	r26, r26
 544:	64 9f       	mul	r22, r20
 546:	66 27       	eor	r22, r22
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	66 1f       	adc	r22, r22
 54e:	82 9f       	mul	r24, r18
 550:	22 27       	eor	r18, r18
 552:	b0 0d       	add	r27, r0
 554:	a1 1d       	adc	r26, r1
 556:	62 1f       	adc	r22, r18
 558:	73 9f       	mul	r23, r19
 55a:	b0 0d       	add	r27, r0
 55c:	a1 1d       	adc	r26, r1
 55e:	62 1f       	adc	r22, r18
 560:	83 9f       	mul	r24, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	22 1f       	adc	r18, r18
 568:	74 9f       	mul	r23, r20
 56a:	33 27       	eor	r19, r19
 56c:	a0 0d       	add	r26, r0
 56e:	61 1d       	adc	r22, r1
 570:	23 1f       	adc	r18, r19
 572:	84 9f       	mul	r24, r20
 574:	60 0d       	add	r22, r0
 576:	21 1d       	adc	r18, r1
 578:	82 2f       	mov	r24, r18
 57a:	76 2f       	mov	r23, r22
 57c:	6a 2f       	mov	r22, r26
 57e:	11 24       	eor	r1, r1
 580:	9f 57       	subi	r25, 0x7F	; 127
 582:	50 40       	sbci	r21, 0x00	; 0
 584:	8a f0       	brmi	.+34     	; 0x5a8 <__mulsf3_pse+0x84>
 586:	e1 f0       	breq	.+56     	; 0x5c0 <__mulsf3_pse+0x9c>
 588:	88 23       	and	r24, r24
 58a:	4a f0       	brmi	.+18     	; 0x59e <__mulsf3_pse+0x7a>
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	bb 1f       	adc	r27, r27
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	a9 f7       	brne	.-22     	; 0x588 <__mulsf3_pse+0x64>
 59e:	9e 3f       	cpi	r25, 0xFE	; 254
 5a0:	51 05       	cpc	r21, r1
 5a2:	70 f0       	brcs	.+28     	; 0x5c0 <__mulsf3_pse+0x9c>
 5a4:	14 c0       	rjmp	.+40     	; 0x5ce <__fp_inf>
 5a6:	a6 cf       	rjmp	.-180    	; 0x4f4 <__fp_szero>
 5a8:	5f 3f       	cpi	r21, 0xFF	; 255
 5aa:	ec f3       	brlt	.-6      	; 0x5a6 <__mulsf3_pse+0x82>
 5ac:	98 3e       	cpi	r25, 0xE8	; 232
 5ae:	dc f3       	brlt	.-10     	; 0x5a6 <__mulsf3_pse+0x82>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f7 95       	ror	r31
 5ba:	e7 95       	ror	r30
 5bc:	9f 5f       	subi	r25, 0xFF	; 255
 5be:	c1 f7       	brne	.-16     	; 0x5b0 <__mulsf3_pse+0x8c>
 5c0:	fe 2b       	or	r31, r30
 5c2:	88 0f       	add	r24, r24
 5c4:	91 1d       	adc	r25, r1
 5c6:	96 95       	lsr	r25
 5c8:	87 95       	ror	r24
 5ca:	97 f9       	bld	r25, 7
 5cc:	08 95       	ret

000005ce <__fp_inf>:
 5ce:	97 f9       	bld	r25, 7
 5d0:	9f 67       	ori	r25, 0x7F	; 127
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	08 95       	ret

000005da <__fp_nan>:
 5da:	9f ef       	ldi	r25, 0xFF	; 255
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	08 95       	ret

000005e0 <__fp_pscA>:
 5e0:	00 24       	eor	r0, r0
 5e2:	0a 94       	dec	r0
 5e4:	16 16       	cp	r1, r22
 5e6:	17 06       	cpc	r1, r23
 5e8:	18 06       	cpc	r1, r24
 5ea:	09 06       	cpc	r0, r25
 5ec:	08 95       	ret

000005ee <__fp_pscB>:
 5ee:	00 24       	eor	r0, r0
 5f0:	0a 94       	dec	r0
 5f2:	12 16       	cp	r1, r18
 5f4:	13 06       	cpc	r1, r19
 5f6:	14 06       	cpc	r1, r20
 5f8:	05 06       	cpc	r0, r21
 5fa:	08 95       	ret

000005fc <__fp_round>:
 5fc:	09 2e       	mov	r0, r25
 5fe:	03 94       	inc	r0
 600:	00 0c       	add	r0, r0
 602:	11 f4       	brne	.+4      	; 0x608 <__fp_round+0xc>
 604:	88 23       	and	r24, r24
 606:	52 f0       	brmi	.+20     	; 0x61c <__fp_round+0x20>
 608:	bb 0f       	add	r27, r27
 60a:	40 f4       	brcc	.+16     	; 0x61c <__fp_round+0x20>
 60c:	bf 2b       	or	r27, r31
 60e:	11 f4       	brne	.+4      	; 0x614 <__fp_round+0x18>
 610:	60 ff       	sbrs	r22, 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <__fp_round+0x20>
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
