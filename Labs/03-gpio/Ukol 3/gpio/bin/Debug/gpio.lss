
bin/Debug/gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000816  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057b  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ed  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f3  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cf  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  78:	0c 94 09 04 	jmp	0x812	; 0x812 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/* Includes ----------------------------------------------------------*/
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <GPIO_config_output+0x6>
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	9a 83       	std	Y+2, r25	; 0x02
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name | (1<<pin_num);
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	fc 01       	movw	r30, r24
  98:	80 81       	ld	r24, Z
  9a:	48 2f       	mov	r20, r24
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	28 2f       	mov	r18, r24
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <GPIO_config_output+0x2c>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	2a 95       	dec	r18
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <GPIO_config_output+0x28>
  b0:	84 2b       	or	r24, r20
  b2:	28 2f       	mov	r18, r24
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
}
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <GPIO_config_input_nopull>:

/*--------------------------------------------------------------------*/
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <GPIO_config_input_nopull+0x6>
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	9a 81       	ldd	r25, Y+2	; 0x02
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_config_input_nopull+0x2c>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_config_input_nopull+0x28>
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	28 2f       	mov	r18, r24
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
    *reg_name++;                    // Change pointer to Data Register
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	9c 01       	movw	r18, r24
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	3a 83       	std	Y+2, r19	; 0x02
 112:	29 83       	std	Y+1, r18	; 0x01
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	48 2f       	mov	r20, r24
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <GPIO_config_input_nopull+0x6a>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	2a 95       	dec	r18
 134:	e2 f7       	brpl	.-8      	; 0x12e <GPIO_config_input_nopull+0x66>
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	28 2f       	mov	r18, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <GPIO_config_input_pullup>:

/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <GPIO_config_input_pullup+0x6>
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <GPIO_config_input_pullup+0x2c>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	2a 95       	dec	r18
 17e:	e2 f7       	brpl	.-8      	; 0x178 <GPIO_config_input_pullup+0x28>
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	28 2f       	mov	r18, r24
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
    *reg_name++;                    // Change pointer to Data Register
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	9c 01       	movw	r18, r24
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	3a 83       	std	Y+2, r19	; 0x02
 19a:	29 83       	std	Y+1, r18	; 0x01
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_config_input_pullup+0x6a>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_config_input_pullup+0x66>
 1be:	84 2b       	or	r24, r20
 1c0:	28 2f       	mov	r18, r24
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
}
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <GPIO_write_low>:

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <GPIO_write_low+0x6>
 1dc:	1f 92       	push	r1
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	9a 83       	std	Y+2, r25	; 0x02
 1e4:	89 83       	std	Y+1, r24	; 0x01
 1e6:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name & ~(1<<pin_num);
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_write_low+0x2c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_write_low+0x28>
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	28 2f       	mov	r18, r24
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
}
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <GPIO_write_high+0x6>
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	9a 83       	std	Y+2, r25	; 0x02
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name | (1<<pin_num);
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	9a 81       	ldd	r25, Y+2	; 0x02
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_write_high+0x2c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_write_high+0x28>
 250:	84 2b       	or	r24, r20
 252:	28 2f       	mov	r18, r24
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <GPIO_toggle>:

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <GPIO_toggle+0x6>
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	6b 83       	std	Y+3, r22	; 0x03
    *reg_name = *reg_name ^ (1<<pin_num);
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	9a 81       	ldd	r25, Y+2	; 0x02
 27e:	fc 01       	movw	r30, r24
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <GPIO_toggle+0x2c>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <GPIO_toggle+0x28>
 298:	84 27       	eor	r24, r20
 29a:	28 2f       	mov	r18, r24
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <GPIO_read>:

/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <GPIO_read+0x6>
 2b6:	1f 92       	push	r1
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	6b 83       	std	Y+3, r22	; 0x03
    if(bit_is_clear(*reg_name, pin_num))
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2b 81       	ldd	r18, Y+3	; 0x03
 2d0:	22 2f       	mov	r18, r18
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_read+0x2c>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_read+0x28>
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	99 27       	eor	r25, r25
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	11 f4       	brne	.+4      	; 0x2ec <GPIO_read+0x3c>
    {
        return 0;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <GPIO_read+0x3e>
    }
    else
    {
        return 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <GPIO_shift>:

/*--------------------------------------------------------------------*/
void GPIO_shift(volatile uint8_t *reg_name)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	00 d0       	rcall	.+0      	; 0x300 <GPIO_shift+0x6>
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	9a 83       	std	Y+2, r25	; 0x02
 306:	89 83       	std	Y+1, r24	; 0x01
    *reg_name=*reg_name<<1;
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	28 2f       	mov	r18, r24
 312:	22 0f       	add	r18, r18
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	fc 01       	movw	r30, r24
 31a:	20 83       	st	Z, r18
}
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <GPIO_unshift>:

/*--------------------------------------------------------------------*/
void GPIO_unshift(volatile uint8_t *reg_name)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <GPIO_unshift+0x6>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	9a 83       	std	Y+2, r25	; 0x02
 332:	89 83       	std	Y+1, r24	; 0x01
    *reg_name=*reg_name>>1;
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	28 2f       	mov	r18, r24
 33e:	26 95       	lsr	r18
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 81       	ldd	r25, Y+2	; 0x02
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <main>:
 * Main function where the program execution begins. Toggle two LEDs
 * when a push button is pressed. Functions from user-defined GPIO
 * library is used instead of low-level logic operations.
 */
int main(void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	6d 97       	sbiw	r28, 0x1d	; 29
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
    int8_t i;
    /* RED LED0 */
    GPIO_config_output(&DDRC, LED_RED_0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	87 e2       	ldi	r24, 0x27	; 39
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_high(&PORTC, LED_RED_0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_write_high>

    /* RED LED1 */
    GPIO_config_output(&DDRC, LED_RED_1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	87 e2       	ldi	r24, 0x27	; 39
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED_1);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_write_low>

    /* RED LED2 */
    GPIO_config_output(&DDRC, LED_RED_2);
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	87 e2       	ldi	r24, 0x27	; 39
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED_2);
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	88 e2       	ldi	r24, 0x28	; 40
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_write_low>

    /* RED LED3 */
    GPIO_config_output(&DDRC, LED_RED_3);
 3a2:	63 e0       	ldi	r22, 0x03	; 3
 3a4:	87 e2       	ldi	r24, 0x27	; 39
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED_3);
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_write_low>

    /* RED LED4 */
    GPIO_config_output(&DDRC, LED_RED_4);
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	87 e2       	ldi	r24, 0x27	; 39
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED_4);
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_write_low>

    /* push button */
    GPIO_config_input_pullup(&DDRD, BTN);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	8a e2       	ldi	r24, 0x2A	; 42
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 a8 00 	call	0x150	; 0x150 <GPIO_config_input_pullup>

    // Infinite loop
    while (1)
    {
        for(i=0;i<4;i++)
 3d4:	19 82       	std	Y+1, r1	; 0x01
 3d6:	83 c0       	rjmp	.+262    	; 0x4de <main+0x18c>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	aa ef       	ldi	r26, 0xFA	; 250
 3de:	b3 e4       	ldi	r27, 0x43	; 67
 3e0:	8a 83       	std	Y+2, r24	; 0x02
 3e2:	9b 83       	std	Y+3, r25	; 0x03
 3e4:	ac 83       	std	Y+4, r26	; 0x04
 3e6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	4a e7       	ldi	r20, 0x7A	; 122
 3ee:	55 e4       	ldi	r21, 0x45	; 69
 3f0:	6a 81       	ldd	r22, Y+2	; 0x02
 3f2:	7b 81       	ldd	r23, Y+3	; 0x03
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	9d 81       	ldd	r25, Y+5	; 0x05
 3f8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	8e 83       	std	Y+6, r24	; 0x06
 402:	9f 83       	std	Y+7, r25	; 0x07
 404:	a8 87       	std	Y+8, r26	; 0x08
 406:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	40 e8       	ldi	r20, 0x80	; 128
 40e:	5f e3       	ldi	r21, 0x3F	; 63
 410:	6e 81       	ldd	r22, Y+6	; 0x06
 412:	7f 81       	ldd	r23, Y+7	; 0x07
 414:	88 85       	ldd	r24, Y+8	; 0x08
 416:	99 85       	ldd	r25, Y+9	; 0x09
 418:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__cmpsf2>
 41c:	88 23       	and	r24, r24
 41e:	2c f4       	brge	.+10     	; 0x42a <main+0xd8>
		__ticks = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9b 87       	std	Y+11, r25	; 0x0b
 426:	8a 87       	std	Y+10, r24	; 0x0a
 428:	3f c0       	rjmp	.+126    	; 0x4a8 <main+0x156>
	else if (__tmp > 65535)
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	3f ef       	ldi	r19, 0xFF	; 255
 42e:	4f e7       	ldi	r20, 0x7F	; 127
 430:	57 e4       	ldi	r21, 0x47	; 71
 432:	6e 81       	ldd	r22, Y+6	; 0x06
 434:	7f 81       	ldd	r23, Y+7	; 0x07
 436:	88 85       	ldd	r24, Y+8	; 0x08
 438:	99 85       	ldd	r25, Y+9	; 0x09
 43a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__gesf2>
 43e:	18 16       	cp	r1, r24
 440:	4c f5       	brge	.+82     	; 0x494 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e2       	ldi	r20, 0x20	; 32
 448:	51 e4       	ldi	r21, 0x41	; 65
 44a:	6a 81       	ldd	r22, Y+2	; 0x02
 44c:	7b 81       	ldd	r23, Y+3	; 0x03
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	9d 81       	ldd	r25, Y+5	; 0x05
 452:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3>
 456:	dc 01       	movw	r26, r24
 458:	cb 01       	movw	r24, r22
 45a:	bc 01       	movw	r22, r24
 45c:	cd 01       	movw	r24, r26
 45e:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 462:	dc 01       	movw	r26, r24
 464:	cb 01       	movw	r24, r22
 466:	9b 87       	std	Y+11, r25	; 0x0b
 468:	8a 87       	std	Y+10, r24	; 0x0a
 46a:	0f c0       	rjmp	.+30     	; 0x48a <main+0x138>
 46c:	80 e9       	ldi	r24, 0x90	; 144
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	9d 87       	std	Y+13, r25	; 0x0d
 472:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 474:	8c 85       	ldd	r24, Y+12	; 0x0c
 476:	9d 85       	ldd	r25, Y+13	; 0x0d
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <main+0x126>
 47c:	9d 87       	std	Y+13, r25	; 0x0d
 47e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 480:	8a 85       	ldd	r24, Y+10	; 0x0a
 482:	9b 85       	ldd	r25, Y+11	; 0x0b
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	9b 87       	std	Y+11, r25	; 0x0b
 488:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 48a:	8a 85       	ldd	r24, Y+10	; 0x0a
 48c:	9b 85       	ldd	r25, Y+11	; 0x0b
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	69 f7       	brne	.-38     	; 0x46c <main+0x11a>
 492:	14 c0       	rjmp	.+40     	; 0x4bc <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 494:	6e 81       	ldd	r22, Y+6	; 0x06
 496:	7f 81       	ldd	r23, Y+7	; 0x07
 498:	88 85       	ldd	r24, Y+8	; 0x08
 49a:	99 85       	ldd	r25, Y+9	; 0x09
 49c:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	9b 87       	std	Y+11, r25	; 0x0b
 4a6:	8a 87       	std	Y+10, r24	; 0x0a
 4a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 4aa:	9b 85       	ldd	r25, Y+11	; 0x0b
 4ac:	9f 87       	std	Y+15, r25	; 0x0f
 4ae:	8e 87       	std	Y+14, r24	; 0x0e
 4b0:	8e 85       	ldd	r24, Y+14	; 0x0e
 4b2:	9f 85       	ldd	r25, Y+15	; 0x0f
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <main+0x162>
 4b8:	9f 87       	std	Y+15, r25	; 0x0f
 4ba:	8e 87       	std	Y+14, r24	; 0x0e
        {
            // Pause several milliseconds
            _delay_ms(BLINK_DELAY);

            loop_until_bit_is_clear(PIND, BTN);
 4bc:	89 e2       	ldi	r24, 0x29	; 41
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	88 2f       	mov	r24, r24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	81 70       	andi	r24, 0x01	; 1
 4ca:	99 27       	eor	r25, r25
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	b1 f7       	brne	.-20     	; 0x4bc <main+0x16a>

            GPIO_shift(&PORTC);
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_shift>
    GPIO_config_input_pullup(&DDRD, BTN);

    // Infinite loop
    while (1)
    {
        for(i=0;i<4;i++)
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	8f 5f       	subi	r24, 0xFF	; 255
 4dc:	89 83       	std	Y+1, r24	; 0x01
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	84 30       	cpi	r24, 0x04	; 4
 4e2:	0c f4       	brge	.+2      	; 0x4e6 <main+0x194>
 4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <main+0x86>
            loop_until_bit_is_clear(PIND, BTN);

            GPIO_shift(&PORTC);
        }

        for(i=0;i<4;i++)
 4e6:	19 82       	std	Y+1, r1	; 0x01
 4e8:	83 c0       	rjmp	.+262    	; 0x5f0 <main+0x29e>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	aa ef       	ldi	r26, 0xFA	; 250
 4f0:	b3 e4       	ldi	r27, 0x43	; 67
 4f2:	88 8b       	std	Y+16, r24	; 0x10
 4f4:	99 8b       	std	Y+17, r25	; 0x11
 4f6:	aa 8b       	std	Y+18, r26	; 0x12
 4f8:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	4a e7       	ldi	r20, 0x7A	; 122
 500:	55 e4       	ldi	r21, 0x45	; 69
 502:	68 89       	ldd	r22, Y+16	; 0x10
 504:	79 89       	ldd	r23, Y+17	; 0x11
 506:	8a 89       	ldd	r24, Y+18	; 0x12
 508:	9b 89       	ldd	r25, Y+19	; 0x13
 50a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3>
 50e:	dc 01       	movw	r26, r24
 510:	cb 01       	movw	r24, r22
 512:	8c 8b       	std	Y+20, r24	; 0x14
 514:	9d 8b       	std	Y+21, r25	; 0x15
 516:	ae 8b       	std	Y+22, r26	; 0x16
 518:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	40 e8       	ldi	r20, 0x80	; 128
 520:	5f e3       	ldi	r21, 0x3F	; 63
 522:	6c 89       	ldd	r22, Y+20	; 0x14
 524:	7d 89       	ldd	r23, Y+21	; 0x15
 526:	8e 89       	ldd	r24, Y+22	; 0x16
 528:	9f 89       	ldd	r25, Y+23	; 0x17
 52a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__cmpsf2>
 52e:	88 23       	and	r24, r24
 530:	2c f4       	brge	.+10     	; 0x53c <main+0x1ea>
		__ticks = 1;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	99 8f       	std	Y+25, r25	; 0x19
 538:	88 8f       	std	Y+24, r24	; 0x18
 53a:	3f c0       	rjmp	.+126    	; 0x5ba <main+0x268>
	else if (__tmp > 65535)
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	3f ef       	ldi	r19, 0xFF	; 255
 540:	4f e7       	ldi	r20, 0x7F	; 127
 542:	57 e4       	ldi	r21, 0x47	; 71
 544:	6c 89       	ldd	r22, Y+20	; 0x14
 546:	7d 89       	ldd	r23, Y+21	; 0x15
 548:	8e 89       	ldd	r24, Y+22	; 0x16
 54a:	9f 89       	ldd	r25, Y+23	; 0x17
 54c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__gesf2>
 550:	18 16       	cp	r1, r24
 552:	4c f5       	brge	.+82     	; 0x5a6 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 e2       	ldi	r20, 0x20	; 32
 55a:	51 e4       	ldi	r21, 0x41	; 65
 55c:	68 89       	ldd	r22, Y+16	; 0x10
 55e:	79 89       	ldd	r23, Y+17	; 0x11
 560:	8a 89       	ldd	r24, Y+18	; 0x12
 562:	9b 89       	ldd	r25, Y+19	; 0x13
 564:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3>
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	bc 01       	movw	r22, r24
 56e:	cd 01       	movw	r24, r26
 570:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 574:	dc 01       	movw	r26, r24
 576:	cb 01       	movw	r24, r22
 578:	99 8f       	std	Y+25, r25	; 0x19
 57a:	88 8f       	std	Y+24, r24	; 0x18
 57c:	0f c0       	rjmp	.+30     	; 0x59c <main+0x24a>
 57e:	80 e9       	ldi	r24, 0x90	; 144
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	9b 8f       	std	Y+27, r25	; 0x1b
 584:	8a 8f       	std	Y+26, r24	; 0x1a
 586:	8a 8d       	ldd	r24, Y+26	; 0x1a
 588:	9b 8d       	ldd	r25, Y+27	; 0x1b
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <main+0x238>
 58e:	9b 8f       	std	Y+27, r25	; 0x1b
 590:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 592:	88 8d       	ldd	r24, Y+24	; 0x18
 594:	99 8d       	ldd	r25, Y+25	; 0x19
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	99 8f       	std	Y+25, r25	; 0x19
 59a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 59c:	88 8d       	ldd	r24, Y+24	; 0x18
 59e:	99 8d       	ldd	r25, Y+25	; 0x19
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	69 f7       	brne	.-38     	; 0x57e <main+0x22c>
 5a4:	14 c0       	rjmp	.+40     	; 0x5ce <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5a6:	6c 89       	ldd	r22, Y+20	; 0x14
 5a8:	7d 89       	ldd	r23, Y+21	; 0x15
 5aa:	8e 89       	ldd	r24, Y+22	; 0x16
 5ac:	9f 89       	ldd	r25, Y+23	; 0x17
 5ae:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 5b2:	dc 01       	movw	r26, r24
 5b4:	cb 01       	movw	r24, r22
 5b6:	99 8f       	std	Y+25, r25	; 0x19
 5b8:	88 8f       	std	Y+24, r24	; 0x18
 5ba:	88 8d       	ldd	r24, Y+24	; 0x18
 5bc:	99 8d       	ldd	r25, Y+25	; 0x19
 5be:	9d 8f       	std	Y+29, r25	; 0x1d
 5c0:	8c 8f       	std	Y+28, r24	; 0x1c
 5c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 5c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x274>
 5ca:	9d 8f       	std	Y+29, r25	; 0x1d
 5cc:	8c 8f       	std	Y+28, r24	; 0x1c
        {
            // Pause several milliseconds
            _delay_ms(BLINK_DELAY);

            loop_until_bit_is_clear(PIND, BTN);
 5ce:	89 e2       	ldi	r24, 0x29	; 41
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	80 81       	ld	r24, Z
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	81 70       	andi	r24, 0x01	; 1
 5dc:	99 27       	eor	r25, r25
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	b1 f7       	brne	.-20     	; 0x5ce <main+0x27c>

            GPIO_unshift(&PORTC);
 5e2:	88 e2       	ldi	r24, 0x28	; 40
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_unshift>
            loop_until_bit_is_clear(PIND, BTN);

            GPIO_shift(&PORTC);
        }

        for(i=0;i<4;i++)
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	84 30       	cpi	r24, 0x04	; 4
 5f4:	0c f4       	brge	.+2      	; 0x5f8 <main+0x2a6>
 5f6:	79 cf       	rjmp	.-270    	; 0x4ea <main+0x198>

            loop_until_bit_is_clear(PIND, BTN);

            GPIO_unshift(&PORTC);
       }
    }
 5f8:	ed ce       	rjmp	.-550    	; 0x3d4 <main+0x82>

000005fa <__cmpsf2>:
 5fa:	2f d0       	rcall	.+94     	; 0x65a <__fp_cmp>
 5fc:	08 f4       	brcc	.+2      	; 0x600 <__cmpsf2+0x6>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret

00000602 <__fixunssfsi>:
 602:	57 d0       	rcall	.+174    	; 0x6b2 <__fp_splitA>
 604:	88 f0       	brcs	.+34     	; 0x628 <__fixunssfsi+0x26>
 606:	9f 57       	subi	r25, 0x7F	; 127
 608:	90 f0       	brcs	.+36     	; 0x62e <__fixunssfsi+0x2c>
 60a:	b9 2f       	mov	r27, r25
 60c:	99 27       	eor	r25, r25
 60e:	b7 51       	subi	r27, 0x17	; 23
 610:	a0 f0       	brcs	.+40     	; 0x63a <__fixunssfsi+0x38>
 612:	d1 f0       	breq	.+52     	; 0x648 <__fixunssfsi+0x46>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	1a f0       	brmi	.+6      	; 0x624 <__fixunssfsi+0x22>
 61e:	ba 95       	dec	r27
 620:	c9 f7       	brne	.-14     	; 0x614 <__fixunssfsi+0x12>
 622:	12 c0       	rjmp	.+36     	; 0x648 <__fixunssfsi+0x46>
 624:	b1 30       	cpi	r27, 0x01	; 1
 626:	81 f0       	breq	.+32     	; 0x648 <__fixunssfsi+0x46>
 628:	5e d0       	rcall	.+188    	; 0x6e6 <__fp_zero>
 62a:	b1 e0       	ldi	r27, 0x01	; 1
 62c:	08 95       	ret
 62e:	5b c0       	rjmp	.+182    	; 0x6e6 <__fp_zero>
 630:	67 2f       	mov	r22, r23
 632:	78 2f       	mov	r23, r24
 634:	88 27       	eor	r24, r24
 636:	b8 5f       	subi	r27, 0xF8	; 248
 638:	39 f0       	breq	.+14     	; 0x648 <__fixunssfsi+0x46>
 63a:	b9 3f       	cpi	r27, 0xF9	; 249
 63c:	cc f3       	brlt	.-14     	; 0x630 <__fixunssfsi+0x2e>
 63e:	86 95       	lsr	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b3 95       	inc	r27
 646:	d9 f7       	brne	.-10     	; 0x63e <__fixunssfsi+0x3c>
 648:	3e f4       	brtc	.+14     	; 0x658 <__fixunssfsi+0x56>
 64a:	90 95       	com	r25
 64c:	80 95       	com	r24
 64e:	70 95       	com	r23
 650:	61 95       	neg	r22
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__fp_cmp>:
 65a:	99 0f       	add	r25, r25
 65c:	00 08       	sbc	r0, r0
 65e:	55 0f       	add	r21, r21
 660:	aa 0b       	sbc	r26, r26
 662:	e0 e8       	ldi	r30, 0x80	; 128
 664:	fe ef       	ldi	r31, 0xFE	; 254
 666:	16 16       	cp	r1, r22
 668:	17 06       	cpc	r1, r23
 66a:	e8 07       	cpc	r30, r24
 66c:	f9 07       	cpc	r31, r25
 66e:	c0 f0       	brcs	.+48     	; 0x6a0 <__fp_cmp+0x46>
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__fp_cmp+0x46>
 67a:	62 1b       	sub	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	95 0b       	sbc	r25, r21
 682:	39 f4       	brne	.+14     	; 0x692 <__fp_cmp+0x38>
 684:	0a 26       	eor	r0, r26
 686:	61 f0       	breq	.+24     	; 0x6a0 <__fp_cmp+0x46>
 688:	23 2b       	or	r18, r19
 68a:	24 2b       	or	r18, r20
 68c:	25 2b       	or	r18, r21
 68e:	21 f4       	brne	.+8      	; 0x698 <__fp_cmp+0x3e>
 690:	08 95       	ret
 692:	0a 26       	eor	r0, r26
 694:	09 f4       	brne	.+2      	; 0x698 <__fp_cmp+0x3e>
 696:	a1 40       	sbci	r26, 0x01	; 1
 698:	a6 95       	lsr	r26
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	81 1d       	adc	r24, r1
 69e:	81 1d       	adc	r24, r1
 6a0:	08 95       	ret

000006a2 <__fp_split3>:
 6a2:	57 fd       	sbrc	r21, 7
 6a4:	90 58       	subi	r25, 0x80	; 128
 6a6:	44 0f       	add	r20, r20
 6a8:	55 1f       	adc	r21, r21
 6aa:	59 f0       	breq	.+22     	; 0x6c2 <__fp_splitA+0x10>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	71 f0       	breq	.+28     	; 0x6cc <__fp_splitA+0x1a>
 6b0:	47 95       	ror	r20

000006b2 <__fp_splitA>:
 6b2:	88 0f       	add	r24, r24
 6b4:	97 fb       	bst	r25, 7
 6b6:	99 1f       	adc	r25, r25
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <__fp_splitA+0x20>
 6ba:	9f 3f       	cpi	r25, 0xFF	; 255
 6bc:	79 f0       	breq	.+30     	; 0x6dc <__fp_splitA+0x2a>
 6be:	87 95       	ror	r24
 6c0:	08 95       	ret
 6c2:	12 16       	cp	r1, r18
 6c4:	13 06       	cpc	r1, r19
 6c6:	14 06       	cpc	r1, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	f2 cf       	rjmp	.-28     	; 0x6b0 <__fp_split3+0xe>
 6cc:	46 95       	lsr	r20
 6ce:	f1 df       	rcall	.-30     	; 0x6b2 <__fp_splitA>
 6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <__fp_splitA+0x30>
 6d2:	16 16       	cp	r1, r22
 6d4:	17 06       	cpc	r1, r23
 6d6:	18 06       	cpc	r1, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	f1 cf       	rjmp	.-30     	; 0x6be <__fp_splitA+0xc>
 6dc:	86 95       	lsr	r24
 6de:	71 05       	cpc	r23, r1
 6e0:	61 05       	cpc	r22, r1
 6e2:	08 94       	sec
 6e4:	08 95       	ret

000006e6 <__fp_zero>:
 6e6:	e8 94       	clt

000006e8 <__fp_szero>:
 6e8:	bb 27       	eor	r27, r27
 6ea:	66 27       	eor	r22, r22
 6ec:	77 27       	eor	r23, r23
 6ee:	cb 01       	movw	r24, r22
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__gesf2>:
 6f4:	b2 df       	rcall	.-156    	; 0x65a <__fp_cmp>
 6f6:	08 f4       	brcc	.+2      	; 0x6fa <__gesf2+0x6>
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__mulsf3>:
 6fc:	0b d0       	rcall	.+22     	; 0x714 <__mulsf3x>
 6fe:	78 c0       	rjmp	.+240    	; 0x7f0 <__fp_round>
 700:	69 d0       	rcall	.+210    	; 0x7d4 <__fp_pscA>
 702:	28 f0       	brcs	.+10     	; 0x70e <__mulsf3+0x12>
 704:	6e d0       	rcall	.+220    	; 0x7e2 <__fp_pscB>
 706:	18 f0       	brcs	.+6      	; 0x70e <__mulsf3+0x12>
 708:	95 23       	and	r25, r21
 70a:	09 f0       	breq	.+2      	; 0x70e <__mulsf3+0x12>
 70c:	5a c0       	rjmp	.+180    	; 0x7c2 <__fp_inf>
 70e:	5f c0       	rjmp	.+190    	; 0x7ce <__fp_nan>
 710:	11 24       	eor	r1, r1
 712:	ea cf       	rjmp	.-44     	; 0x6e8 <__fp_szero>

00000714 <__mulsf3x>:
 714:	c6 df       	rcall	.-116    	; 0x6a2 <__fp_split3>
 716:	a0 f3       	brcs	.-24     	; 0x700 <__mulsf3+0x4>

00000718 <__mulsf3_pse>:
 718:	95 9f       	mul	r25, r21
 71a:	d1 f3       	breq	.-12     	; 0x710 <__mulsf3+0x14>
 71c:	95 0f       	add	r25, r21
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	55 1f       	adc	r21, r21
 722:	62 9f       	mul	r22, r18
 724:	f0 01       	movw	r30, r0
 726:	72 9f       	mul	r23, r18
 728:	bb 27       	eor	r27, r27
 72a:	f0 0d       	add	r31, r0
 72c:	b1 1d       	adc	r27, r1
 72e:	63 9f       	mul	r22, r19
 730:	aa 27       	eor	r26, r26
 732:	f0 0d       	add	r31, r0
 734:	b1 1d       	adc	r27, r1
 736:	aa 1f       	adc	r26, r26
 738:	64 9f       	mul	r22, r20
 73a:	66 27       	eor	r22, r22
 73c:	b0 0d       	add	r27, r0
 73e:	a1 1d       	adc	r26, r1
 740:	66 1f       	adc	r22, r22
 742:	82 9f       	mul	r24, r18
 744:	22 27       	eor	r18, r18
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	62 1f       	adc	r22, r18
 74c:	73 9f       	mul	r23, r19
 74e:	b0 0d       	add	r27, r0
 750:	a1 1d       	adc	r26, r1
 752:	62 1f       	adc	r22, r18
 754:	83 9f       	mul	r24, r19
 756:	a0 0d       	add	r26, r0
 758:	61 1d       	adc	r22, r1
 75a:	22 1f       	adc	r18, r18
 75c:	74 9f       	mul	r23, r20
 75e:	33 27       	eor	r19, r19
 760:	a0 0d       	add	r26, r0
 762:	61 1d       	adc	r22, r1
 764:	23 1f       	adc	r18, r19
 766:	84 9f       	mul	r24, r20
 768:	60 0d       	add	r22, r0
 76a:	21 1d       	adc	r18, r1
 76c:	82 2f       	mov	r24, r18
 76e:	76 2f       	mov	r23, r22
 770:	6a 2f       	mov	r22, r26
 772:	11 24       	eor	r1, r1
 774:	9f 57       	subi	r25, 0x7F	; 127
 776:	50 40       	sbci	r21, 0x00	; 0
 778:	8a f0       	brmi	.+34     	; 0x79c <__mulsf3_pse+0x84>
 77a:	e1 f0       	breq	.+56     	; 0x7b4 <__mulsf3_pse+0x9c>
 77c:	88 23       	and	r24, r24
 77e:	4a f0       	brmi	.+18     	; 0x792 <__mulsf3_pse+0x7a>
 780:	ee 0f       	add	r30, r30
 782:	ff 1f       	adc	r31, r31
 784:	bb 1f       	adc	r27, r27
 786:	66 1f       	adc	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	91 50       	subi	r25, 0x01	; 1
 78e:	50 40       	sbci	r21, 0x00	; 0
 790:	a9 f7       	brne	.-22     	; 0x77c <__mulsf3_pse+0x64>
 792:	9e 3f       	cpi	r25, 0xFE	; 254
 794:	51 05       	cpc	r21, r1
 796:	70 f0       	brcs	.+28     	; 0x7b4 <__mulsf3_pse+0x9c>
 798:	14 c0       	rjmp	.+40     	; 0x7c2 <__fp_inf>
 79a:	a6 cf       	rjmp	.-180    	; 0x6e8 <__fp_szero>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	ec f3       	brlt	.-6      	; 0x79a <__mulsf3_pse+0x82>
 7a0:	98 3e       	cpi	r25, 0xE8	; 232
 7a2:	dc f3       	brlt	.-10     	; 0x79a <__mulsf3_pse+0x82>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f7 95       	ror	r31
 7ae:	e7 95       	ror	r30
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	c1 f7       	brne	.-16     	; 0x7a4 <__mulsf3_pse+0x8c>
 7b4:	fe 2b       	or	r31, r30
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_inf>:
 7c2:	97 f9       	bld	r25, 7
 7c4:	9f 67       	ori	r25, 0x7F	; 127
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	08 95       	ret

000007ce <__fp_nan>:
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	08 95       	ret

000007d4 <__fp_pscA>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	09 06       	cpc	r0, r25
 7e0:	08 95       	ret

000007e2 <__fp_pscB>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	05 06       	cpc	r0, r21
 7ee:	08 95       	ret

000007f0 <__fp_round>:
 7f0:	09 2e       	mov	r0, r25
 7f2:	03 94       	inc	r0
 7f4:	00 0c       	add	r0, r0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__fp_round+0xc>
 7f8:	88 23       	and	r24, r24
 7fa:	52 f0       	brmi	.+20     	; 0x810 <__fp_round+0x20>
 7fc:	bb 0f       	add	r27, r27
 7fe:	40 f4       	brcc	.+16     	; 0x810 <__fp_round+0x20>
 800:	bf 2b       	or	r27, r31
 802:	11 f4       	brne	.+4      	; 0x808 <__fp_round+0x18>
 804:	60 ff       	sbrs	r22, 0
 806:	04 c0       	rjmp	.+8      	; 0x810 <__fp_round+0x20>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <_exit>:
 812:	f8 94       	cli

00000814 <__stop_program>:
 814:	ff cf       	rjmp	.-2      	; 0x814 <__stop_program>
