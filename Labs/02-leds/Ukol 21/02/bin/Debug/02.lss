
bin/Debug/02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000668  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031e  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000149  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d8  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/**
 * Main function where the program execution begins. Toggle two LEDs
 * when a push button is pressed.
 */
int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	6e 97       	sbiw	r28, 0x1e	; 30
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
    int i;
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	24 e2       	ldi	r18, 0x24	; 36
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	20 62       	ori	r18, 0x20	; 32
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  a6:	85 e2       	ldi	r24, 0x25	; 37
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	25 e2       	ldi	r18, 0x25	; 37
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	2f 7d       	andi	r18, 0xDF	; 223
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18

    /* buton */

    DDRD = DDRD & ~(1<<BTN);
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2a e2       	ldi	r18, 0x2A	; 42
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	2e 7f       	andi	r18, 0xFE	; 254
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
    PORTD = PORTD | (1<<BTN);
  ca:	8b e2       	ldi	r24, 0x2B	; 43
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2b e2       	ldi	r18, 0x2B	; 43
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	21 60       	ori	r18, 0x01	; 1
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18


    // Infinite loop
    while (1)
    {
        for(i=0;i<BLINK_DELAY;i++)
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	1d c1       	rjmp	.+570    	; 0x31c <main+0x29c>

        {
        loop_until_bit_is_clear(PIND, BTN);
  e2:	89 e2       	ldi	r24, 0x29	; 41
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
  ea:	88 2f       	mov	r24, r24
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	99 27       	eor	r25, r25
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	b1 f7       	brne	.-20     	; 0xe2 <main+0x62>

        PORTB = PORTB ^ (1<<LED_GREEN);
  f6:	85 e2       	ldi	r24, 0x25	; 37
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	25 e2       	ldi	r18, 0x25	; 37
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	30 81       	ld	r19, Z
 102:	20 e2       	ldi	r18, 0x20	; 32
 104:	23 27       	eor	r18, r19
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18

        _delay_ms(i);
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	aa 27       	eor	r26, r26
 110:	97 fd       	sbrc	r25, 7
 112:	a0 95       	com	r26
 114:	ba 2f       	mov	r27, r26
 116:	bc 01       	movw	r22, r24
 118:	cd 01       	movw	r24, r26
 11a:	0e 94 c7 01 	call	0x38e	; 0x38e <__floatsisf>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	8b 83       	std	Y+3, r24	; 0x03
 124:	9c 83       	std	Y+4, r25	; 0x04
 126:	ad 83       	std	Y+5, r26	; 0x05
 128:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	4a e7       	ldi	r20, 0x7A	; 122
 130:	55 e4       	ldi	r21, 0x45	; 69
 132:	6b 81       	ldd	r22, Y+3	; 0x03
 134:	7c 81       	ldd	r23, Y+4	; 0x04
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	9e 81       	ldd	r25, Y+6	; 0x06
 13a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__mulsf3>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	8f 83       	std	Y+7, r24	; 0x07
 144:	98 87       	std	Y+8, r25	; 0x08
 146:	a9 87       	std	Y+9, r26	; 0x09
 148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e8       	ldi	r20, 0x80	; 128
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	6f 81       	ldd	r22, Y+7	; 0x07
 154:	78 85       	ldd	r23, Y+8	; 0x08
 156:	89 85       	ldd	r24, Y+9	; 0x09
 158:	9a 85       	ldd	r25, Y+10	; 0x0a
 15a:	0e 94 95 01 	call	0x32a	; 0x32a <__cmpsf2>
 15e:	88 23       	and	r24, r24
 160:	2c f4       	brge	.+10     	; 0x16c <main+0xec>
		__ticks = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9c 87       	std	Y+12, r25	; 0x0c
 168:	8b 87       	std	Y+11, r24	; 0x0b
 16a:	3f c0       	rjmp	.+126    	; 0x1ea <main+0x16a>
	else if (__tmp > 65535)
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	3f ef       	ldi	r19, 0xFF	; 255
 170:	4f e7       	ldi	r20, 0x7F	; 127
 172:	57 e4       	ldi	r21, 0x47	; 71
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	78 85       	ldd	r23, Y+8	; 0x08
 178:	89 85       	ldd	r24, Y+9	; 0x09
 17a:	9a 85       	ldd	r25, Y+10	; 0x0a
 17c:	0e 94 4f 02 	call	0x49e	; 0x49e <__gesf2>
 180:	18 16       	cp	r1, r24
 182:	4c f5       	brge	.+82     	; 0x1d6 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	6b 81       	ldd	r22, Y+3	; 0x03
 18e:	7c 81       	ldd	r23, Y+4	; 0x04
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__mulsf3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	bc 01       	movw	r22, r24
 19e:	cd 01       	movw	r24, r26
 1a0:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	9c 87       	std	Y+12, r25	; 0x0c
 1aa:	8b 87       	std	Y+11, r24	; 0x0b
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <main+0x14c>
 1ae:	80 e9       	ldi	r24, 0x90	; 144
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	9e 87       	std	Y+14, r25	; 0x0e
 1b4:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1b8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x13a>
 1be:	9e 87       	std	Y+14, r25	; 0x0e
 1c0:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1c4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	9c 87       	std	Y+12, r25	; 0x0c
 1ca:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	69 f7       	brne	.-38     	; 0x1ae <main+0x12e>
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d6:	6f 81       	ldd	r22, Y+7	; 0x07
 1d8:	78 85       	ldd	r23, Y+8	; 0x08
 1da:	89 85       	ldd	r24, Y+9	; 0x09
 1dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1de:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	9c 87       	std	Y+12, r25	; 0x0c
 1e8:	8b 87       	std	Y+11, r24	; 0x0b
 1ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ee:	98 8b       	std	Y+16, r25	; 0x10
 1f0:	8f 87       	std	Y+15, r24	; 0x0f
 1f2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f4:	98 89       	ldd	r25, Y+16	; 0x10
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x176>
 1fa:	98 8b       	std	Y+16, r25	; 0x10
 1fc:	8f 87       	std	Y+15, r24	; 0x0f

        PORTB = PORTB ^ (1<<LED_GREEN);
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	25 e2       	ldi	r18, 0x25	; 37
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	30 81       	ld	r19, Z
 20a:	20 e2       	ldi	r18, 0x20	; 32
 20c:	23 27       	eor	r18, r19
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18

        _delay_ms(BLINK_DELAY-i);
 212:	2a ef       	ldi	r18, 0xFA	; 250
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	a9 01       	movw	r20, r18
 21c:	48 1b       	sub	r20, r24
 21e:	59 0b       	sbc	r21, r25
 220:	ca 01       	movw	r24, r20
 222:	aa 27       	eor	r26, r26
 224:	97 fd       	sbrc	r25, 7
 226:	a0 95       	com	r26
 228:	ba 2f       	mov	r27, r26
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	0e 94 c7 01 	call	0x38e	; 0x38e <__floatsisf>
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	89 8b       	std	Y+17, r24	; 0x11
 238:	9a 8b       	std	Y+18, r25	; 0x12
 23a:	ab 8b       	std	Y+19, r26	; 0x13
 23c:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	4a e7       	ldi	r20, 0x7A	; 122
 244:	55 e4       	ldi	r21, 0x45	; 69
 246:	69 89       	ldd	r22, Y+17	; 0x11
 248:	7a 89       	ldd	r23, Y+18	; 0x12
 24a:	8b 89       	ldd	r24, Y+19	; 0x13
 24c:	9c 89       	ldd	r25, Y+20	; 0x14
 24e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__mulsf3>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	8d 8b       	std	Y+21, r24	; 0x15
 258:	9e 8b       	std	Y+22, r25	; 0x16
 25a:	af 8b       	std	Y+23, r26	; 0x17
 25c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e8       	ldi	r20, 0x80	; 128
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	6d 89       	ldd	r22, Y+21	; 0x15
 268:	7e 89       	ldd	r23, Y+22	; 0x16
 26a:	8f 89       	ldd	r24, Y+23	; 0x17
 26c:	98 8d       	ldd	r25, Y+24	; 0x18
 26e:	0e 94 95 01 	call	0x32a	; 0x32a <__cmpsf2>
 272:	88 23       	and	r24, r24
 274:	2c f4       	brge	.+10     	; 0x280 <main+0x200>
		__ticks = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9a 8f       	std	Y+26, r25	; 0x1a
 27c:	89 8f       	std	Y+25, r24	; 0x19
 27e:	3f c0       	rjmp	.+126    	; 0x2fe <main+0x27e>
	else if (__tmp > 65535)
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	3f ef       	ldi	r19, 0xFF	; 255
 284:	4f e7       	ldi	r20, 0x7F	; 127
 286:	57 e4       	ldi	r21, 0x47	; 71
 288:	6d 89       	ldd	r22, Y+21	; 0x15
 28a:	7e 89       	ldd	r23, Y+22	; 0x16
 28c:	8f 89       	ldd	r24, Y+23	; 0x17
 28e:	98 8d       	ldd	r25, Y+24	; 0x18
 290:	0e 94 4f 02 	call	0x49e	; 0x49e <__gesf2>
 294:	18 16       	cp	r1, r24
 296:	4c f5       	brge	.+82     	; 0x2ea <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e2       	ldi	r20, 0x20	; 32
 29e:	51 e4       	ldi	r21, 0x41	; 65
 2a0:	69 89       	ldd	r22, Y+17	; 0x11
 2a2:	7a 89       	ldd	r23, Y+18	; 0x12
 2a4:	8b 89       	ldd	r24, Y+19	; 0x13
 2a6:	9c 89       	ldd	r25, Y+20	; 0x14
 2a8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__mulsf3>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	9a 8f       	std	Y+26, r25	; 0x1a
 2be:	89 8f       	std	Y+25, r24	; 0x19
 2c0:	0f c0       	rjmp	.+30     	; 0x2e0 <main+0x260>
 2c2:	80 e9       	ldi	r24, 0x90	; 144
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	9c 8f       	std	Y+28, r25	; 0x1c
 2c8:	8b 8f       	std	Y+27, r24	; 0x1b
 2ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x24e>
 2d2:	9c 8f       	std	Y+28, r25	; 0x1c
 2d4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	89 8d       	ldd	r24, Y+25	; 0x19
 2d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	9a 8f       	std	Y+26, r25	; 0x1a
 2de:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e0:	89 8d       	ldd	r24, Y+25	; 0x19
 2e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	69 f7       	brne	.-38     	; 0x2c2 <main+0x242>
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <main+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ea:	6d 89       	ldd	r22, Y+21	; 0x15
 2ec:	7e 89       	ldd	r23, Y+22	; 0x16
 2ee:	8f 89       	ldd	r24, Y+23	; 0x17
 2f0:	98 8d       	ldd	r25, Y+24	; 0x18
 2f2:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	9a 8f       	std	Y+26, r25	; 0x1a
 2fc:	89 8f       	std	Y+25, r24	; 0x19
 2fe:	89 8d       	ldd	r24, Y+25	; 0x19
 300:	9a 8d       	ldd	r25, Y+26	; 0x1a
 302:	9e 8f       	std	Y+30, r25	; 0x1e
 304:	8d 8f       	std	Y+29, r24	; 0x1d
 306:	8d 8d       	ldd	r24, Y+29	; 0x1d
 308:	9e 8d       	ldd	r25, Y+30	; 0x1e
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x28a>
 30e:	9e 8f       	std	Y+30, r25	; 0x1e
 310:	8d 8f       	std	Y+29, r24	; 0x1d


    // Infinite loop
    while (1)
    {
        for(i=0;i<BLINK_DELAY;i++)
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	9a 83       	std	Y+2, r25	; 0x02
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	8a 3f       	cpi	r24, 0xFA	; 250
 322:	91 05       	cpc	r25, r1
 324:	0c f4       	brge	.+2      	; 0x328 <main+0x2a8>
 326:	dd ce       	rjmp	.-582    	; 0xe2 <main+0x62>

        PORTB = PORTB ^ (1<<LED_GREEN);

        _delay_ms(BLINK_DELAY-i);
        }
    }
 328:	d9 ce       	rjmp	.-590    	; 0xdc <main+0x5c>

0000032a <__cmpsf2>:
 32a:	6c d0       	rcall	.+216    	; 0x404 <__fp_cmp>
 32c:	08 f4       	brcc	.+2      	; 0x330 <__cmpsf2+0x6>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret

00000332 <__fixunssfsi>:
 332:	94 d0       	rcall	.+296    	; 0x45c <__fp_splitA>
 334:	88 f0       	brcs	.+34     	; 0x358 <__fixunssfsi+0x26>
 336:	9f 57       	subi	r25, 0x7F	; 127
 338:	90 f0       	brcs	.+36     	; 0x35e <__fixunssfsi+0x2c>
 33a:	b9 2f       	mov	r27, r25
 33c:	99 27       	eor	r25, r25
 33e:	b7 51       	subi	r27, 0x17	; 23
 340:	a0 f0       	brcs	.+40     	; 0x36a <__fixunssfsi+0x38>
 342:	d1 f0       	breq	.+52     	; 0x378 <__fixunssfsi+0x46>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	88 1f       	adc	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	1a f0       	brmi	.+6      	; 0x354 <__fixunssfsi+0x22>
 34e:	ba 95       	dec	r27
 350:	c9 f7       	brne	.-14     	; 0x344 <__fixunssfsi+0x12>
 352:	12 c0       	rjmp	.+36     	; 0x378 <__fixunssfsi+0x46>
 354:	b1 30       	cpi	r27, 0x01	; 1
 356:	81 f0       	breq	.+32     	; 0x378 <__fixunssfsi+0x46>
 358:	9b d0       	rcall	.+310    	; 0x490 <__fp_zero>
 35a:	b1 e0       	ldi	r27, 0x01	; 1
 35c:	08 95       	ret
 35e:	98 c0       	rjmp	.+304    	; 0x490 <__fp_zero>
 360:	67 2f       	mov	r22, r23
 362:	78 2f       	mov	r23, r24
 364:	88 27       	eor	r24, r24
 366:	b8 5f       	subi	r27, 0xF8	; 248
 368:	39 f0       	breq	.+14     	; 0x378 <__fixunssfsi+0x46>
 36a:	b9 3f       	cpi	r27, 0xF9	; 249
 36c:	cc f3       	brlt	.-14     	; 0x360 <__fixunssfsi+0x2e>
 36e:	86 95       	lsr	r24
 370:	77 95       	ror	r23
 372:	67 95       	ror	r22
 374:	b3 95       	inc	r27
 376:	d9 f7       	brne	.-10     	; 0x36e <__fixunssfsi+0x3c>
 378:	3e f4       	brtc	.+14     	; 0x388 <__fixunssfsi+0x56>
 37a:	90 95       	com	r25
 37c:	80 95       	com	r24
 37e:	70 95       	com	r23
 380:	61 95       	neg	r22
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	08 95       	ret

0000038a <__floatunsisf>:
 38a:	e8 94       	clt
 38c:	09 c0       	rjmp	.+18     	; 0x3a0 <__floatsisf+0x12>

0000038e <__floatsisf>:
 38e:	97 fb       	bst	r25, 7
 390:	3e f4       	brtc	.+14     	; 0x3a0 <__floatsisf+0x12>
 392:	90 95       	com	r25
 394:	80 95       	com	r24
 396:	70 95       	com	r23
 398:	61 95       	neg	r22
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	8f 4f       	sbci	r24, 0xFF	; 255
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	99 23       	and	r25, r25
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <__floatsisf+0x40>
 3a4:	f9 2f       	mov	r31, r25
 3a6:	96 e9       	ldi	r25, 0x96	; 150
 3a8:	bb 27       	eor	r27, r27
 3aa:	93 95       	inc	r25
 3ac:	f6 95       	lsr	r31
 3ae:	87 95       	ror	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b7 95       	ror	r27
 3b6:	f1 11       	cpse	r31, r1
 3b8:	f8 cf       	rjmp	.-16     	; 0x3aa <__floatsisf+0x1c>
 3ba:	fa f4       	brpl	.+62     	; 0x3fa <__floatsisf+0x6c>
 3bc:	bb 0f       	add	r27, r27
 3be:	11 f4       	brne	.+4      	; 0x3c4 <__floatsisf+0x36>
 3c0:	60 ff       	sbrs	r22, 0
 3c2:	1b c0       	rjmp	.+54     	; 0x3fa <__floatsisf+0x6c>
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	16 c0       	rjmp	.+44     	; 0x3fa <__floatsisf+0x6c>
 3ce:	88 23       	and	r24, r24
 3d0:	11 f0       	breq	.+4      	; 0x3d6 <__floatsisf+0x48>
 3d2:	96 e9       	ldi	r25, 0x96	; 150
 3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <__floatsisf+0x6a>
 3d6:	77 23       	and	r23, r23
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <__floatsisf+0x54>
 3da:	9e e8       	ldi	r25, 0x8E	; 142
 3dc:	87 2f       	mov	r24, r23
 3de:	76 2f       	mov	r23, r22
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <__floatsisf+0x5e>
 3e2:	66 23       	and	r22, r22
 3e4:	71 f0       	breq	.+28     	; 0x402 <__floatsisf+0x74>
 3e6:	96 e8       	ldi	r25, 0x86	; 134
 3e8:	86 2f       	mov	r24, r22
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	2a f0       	brmi	.+10     	; 0x3fa <__floatsisf+0x6c>
 3f0:	9a 95       	dec	r25
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	da f7       	brpl	.-10     	; 0x3f0 <__floatsisf+0x62>
 3fa:	88 0f       	add	r24, r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	97 f9       	bld	r25, 7
 402:	08 95       	ret

00000404 <__fp_cmp>:
 404:	99 0f       	add	r25, r25
 406:	00 08       	sbc	r0, r0
 408:	55 0f       	add	r21, r21
 40a:	aa 0b       	sbc	r26, r26
 40c:	e0 e8       	ldi	r30, 0x80	; 128
 40e:	fe ef       	ldi	r31, 0xFE	; 254
 410:	16 16       	cp	r1, r22
 412:	17 06       	cpc	r1, r23
 414:	e8 07       	cpc	r30, r24
 416:	f9 07       	cpc	r31, r25
 418:	c0 f0       	brcs	.+48     	; 0x44a <__fp_cmp+0x46>
 41a:	12 16       	cp	r1, r18
 41c:	13 06       	cpc	r1, r19
 41e:	e4 07       	cpc	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	98 f0       	brcs	.+38     	; 0x44a <__fp_cmp+0x46>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	95 0b       	sbc	r25, r21
 42c:	39 f4       	brne	.+14     	; 0x43c <__fp_cmp+0x38>
 42e:	0a 26       	eor	r0, r26
 430:	61 f0       	breq	.+24     	; 0x44a <__fp_cmp+0x46>
 432:	23 2b       	or	r18, r19
 434:	24 2b       	or	r18, r20
 436:	25 2b       	or	r18, r21
 438:	21 f4       	brne	.+8      	; 0x442 <__fp_cmp+0x3e>
 43a:	08 95       	ret
 43c:	0a 26       	eor	r0, r26
 43e:	09 f4       	brne	.+2      	; 0x442 <__fp_cmp+0x3e>
 440:	a1 40       	sbci	r26, 0x01	; 1
 442:	a6 95       	lsr	r26
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	81 1d       	adc	r24, r1
 448:	81 1d       	adc	r24, r1
 44a:	08 95       	ret

0000044c <__fp_split3>:
 44c:	57 fd       	sbrc	r21, 7
 44e:	90 58       	subi	r25, 0x80	; 128
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	59 f0       	breq	.+22     	; 0x46c <__fp_splitA+0x10>
 456:	5f 3f       	cpi	r21, 0xFF	; 255
 458:	71 f0       	breq	.+28     	; 0x476 <__fp_splitA+0x1a>
 45a:	47 95       	ror	r20

0000045c <__fp_splitA>:
 45c:	88 0f       	add	r24, r24
 45e:	97 fb       	bst	r25, 7
 460:	99 1f       	adc	r25, r25
 462:	61 f0       	breq	.+24     	; 0x47c <__fp_splitA+0x20>
 464:	9f 3f       	cpi	r25, 0xFF	; 255
 466:	79 f0       	breq	.+30     	; 0x486 <__fp_splitA+0x2a>
 468:	87 95       	ror	r24
 46a:	08 95       	ret
 46c:	12 16       	cp	r1, r18
 46e:	13 06       	cpc	r1, r19
 470:	14 06       	cpc	r1, r20
 472:	55 1f       	adc	r21, r21
 474:	f2 cf       	rjmp	.-28     	; 0x45a <__fp_split3+0xe>
 476:	46 95       	lsr	r20
 478:	f1 df       	rcall	.-30     	; 0x45c <__fp_splitA>
 47a:	08 c0       	rjmp	.+16     	; 0x48c <__fp_splitA+0x30>
 47c:	16 16       	cp	r1, r22
 47e:	17 06       	cpc	r1, r23
 480:	18 06       	cpc	r1, r24
 482:	99 1f       	adc	r25, r25
 484:	f1 cf       	rjmp	.-30     	; 0x468 <__fp_splitA+0xc>
 486:	86 95       	lsr	r24
 488:	71 05       	cpc	r23, r1
 48a:	61 05       	cpc	r22, r1
 48c:	08 94       	sec
 48e:	08 95       	ret

00000490 <__fp_zero>:
 490:	e8 94       	clt

00000492 <__fp_szero>:
 492:	bb 27       	eor	r27, r27
 494:	66 27       	eor	r22, r22
 496:	77 27       	eor	r23, r23
 498:	cb 01       	movw	r24, r22
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__gesf2>:
 49e:	b2 df       	rcall	.-156    	; 0x404 <__fp_cmp>
 4a0:	08 f4       	brcc	.+2      	; 0x4a4 <__gesf2+0x6>
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <__mulsf3>:
 4a6:	0b d0       	rcall	.+22     	; 0x4be <__mulsf3x>
 4a8:	78 c0       	rjmp	.+240    	; 0x59a <__fp_round>
 4aa:	69 d0       	rcall	.+210    	; 0x57e <__fp_pscA>
 4ac:	28 f0       	brcs	.+10     	; 0x4b8 <__mulsf3+0x12>
 4ae:	6e d0       	rcall	.+220    	; 0x58c <__fp_pscB>
 4b0:	18 f0       	brcs	.+6      	; 0x4b8 <__mulsf3+0x12>
 4b2:	95 23       	and	r25, r21
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__mulsf3+0x12>
 4b6:	5a c0       	rjmp	.+180    	; 0x56c <__fp_inf>
 4b8:	5f c0       	rjmp	.+190    	; 0x578 <__fp_nan>
 4ba:	11 24       	eor	r1, r1
 4bc:	ea cf       	rjmp	.-44     	; 0x492 <__fp_szero>

000004be <__mulsf3x>:
 4be:	c6 df       	rcall	.-116    	; 0x44c <__fp_split3>
 4c0:	a0 f3       	brcs	.-24     	; 0x4aa <__mulsf3+0x4>

000004c2 <__mulsf3_pse>:
 4c2:	95 9f       	mul	r25, r21
 4c4:	d1 f3       	breq	.-12     	; 0x4ba <__mulsf3+0x14>
 4c6:	95 0f       	add	r25, r21
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	55 1f       	adc	r21, r21
 4cc:	62 9f       	mul	r22, r18
 4ce:	f0 01       	movw	r30, r0
 4d0:	72 9f       	mul	r23, r18
 4d2:	bb 27       	eor	r27, r27
 4d4:	f0 0d       	add	r31, r0
 4d6:	b1 1d       	adc	r27, r1
 4d8:	63 9f       	mul	r22, r19
 4da:	aa 27       	eor	r26, r26
 4dc:	f0 0d       	add	r31, r0
 4de:	b1 1d       	adc	r27, r1
 4e0:	aa 1f       	adc	r26, r26
 4e2:	64 9f       	mul	r22, r20
 4e4:	66 27       	eor	r22, r22
 4e6:	b0 0d       	add	r27, r0
 4e8:	a1 1d       	adc	r26, r1
 4ea:	66 1f       	adc	r22, r22
 4ec:	82 9f       	mul	r24, r18
 4ee:	22 27       	eor	r18, r18
 4f0:	b0 0d       	add	r27, r0
 4f2:	a1 1d       	adc	r26, r1
 4f4:	62 1f       	adc	r22, r18
 4f6:	73 9f       	mul	r23, r19
 4f8:	b0 0d       	add	r27, r0
 4fa:	a1 1d       	adc	r26, r1
 4fc:	62 1f       	adc	r22, r18
 4fe:	83 9f       	mul	r24, r19
 500:	a0 0d       	add	r26, r0
 502:	61 1d       	adc	r22, r1
 504:	22 1f       	adc	r18, r18
 506:	74 9f       	mul	r23, r20
 508:	33 27       	eor	r19, r19
 50a:	a0 0d       	add	r26, r0
 50c:	61 1d       	adc	r22, r1
 50e:	23 1f       	adc	r18, r19
 510:	84 9f       	mul	r24, r20
 512:	60 0d       	add	r22, r0
 514:	21 1d       	adc	r18, r1
 516:	82 2f       	mov	r24, r18
 518:	76 2f       	mov	r23, r22
 51a:	6a 2f       	mov	r22, r26
 51c:	11 24       	eor	r1, r1
 51e:	9f 57       	subi	r25, 0x7F	; 127
 520:	50 40       	sbci	r21, 0x00	; 0
 522:	8a f0       	brmi	.+34     	; 0x546 <__mulsf3_pse+0x84>
 524:	e1 f0       	breq	.+56     	; 0x55e <__mulsf3_pse+0x9c>
 526:	88 23       	and	r24, r24
 528:	4a f0       	brmi	.+18     	; 0x53c <__mulsf3_pse+0x7a>
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	bb 1f       	adc	r27, r27
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	91 50       	subi	r25, 0x01	; 1
 538:	50 40       	sbci	r21, 0x00	; 0
 53a:	a9 f7       	brne	.-22     	; 0x526 <__mulsf3_pse+0x64>
 53c:	9e 3f       	cpi	r25, 0xFE	; 254
 53e:	51 05       	cpc	r21, r1
 540:	70 f0       	brcs	.+28     	; 0x55e <__mulsf3_pse+0x9c>
 542:	14 c0       	rjmp	.+40     	; 0x56c <__fp_inf>
 544:	a6 cf       	rjmp	.-180    	; 0x492 <__fp_szero>
 546:	5f 3f       	cpi	r21, 0xFF	; 255
 548:	ec f3       	brlt	.-6      	; 0x544 <__mulsf3_pse+0x82>
 54a:	98 3e       	cpi	r25, 0xE8	; 232
 54c:	dc f3       	brlt	.-10     	; 0x544 <__mulsf3_pse+0x82>
 54e:	86 95       	lsr	r24
 550:	77 95       	ror	r23
 552:	67 95       	ror	r22
 554:	b7 95       	ror	r27
 556:	f7 95       	ror	r31
 558:	e7 95       	ror	r30
 55a:	9f 5f       	subi	r25, 0xFF	; 255
 55c:	c1 f7       	brne	.-16     	; 0x54e <__mulsf3_pse+0x8c>
 55e:	fe 2b       	or	r31, r30
 560:	88 0f       	add	r24, r24
 562:	91 1d       	adc	r25, r1
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_inf>:
 56c:	97 f9       	bld	r25, 7
 56e:	9f 67       	ori	r25, 0x7F	; 127
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	08 95       	ret

00000578 <__fp_nan>:
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	08 95       	ret

0000057e <__fp_pscA>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	09 06       	cpc	r0, r25
 58a:	08 95       	ret

0000058c <__fp_pscB>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	05 06       	cpc	r0, r21
 598:	08 95       	ret

0000059a <__fp_round>:
 59a:	09 2e       	mov	r0, r25
 59c:	03 94       	inc	r0
 59e:	00 0c       	add	r0, r0
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0xc>
 5a2:	88 23       	and	r24, r24
 5a4:	52 f0       	brmi	.+20     	; 0x5ba <__fp_round+0x20>
 5a6:	bb 0f       	add	r27, r27
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <__fp_round+0x20>
 5aa:	bf 2b       	or	r27, r31
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0x18>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__fp_round+0x20>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
