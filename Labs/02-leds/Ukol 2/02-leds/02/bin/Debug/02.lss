
bin/Debug/02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000680  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031e  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000149  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f1  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014b  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/**
 * Main function where the program execution begins. Toggle two LEDs
 * when a push button is pressed.
 */
int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	6e 97       	sbiw	r28, 0x1e	; 30
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
    int i;
    /* LEDs */
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_RED_0);
  94:	87 e2       	ldi	r24, 0x27	; 39
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	27 e2       	ldi	r18, 0x27	; 39
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	21 60       	ori	r18, 0x01	; 1
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTC = PORTC | (1<<LED_RED_0);
  a6:	88 e2       	ldi	r24, 0x28	; 40
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	28 e2       	ldi	r18, 0x28	; 40
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	21 60       	ori	r18, 0x01	; 1
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_RED_1);
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	27 e2       	ldi	r18, 0x27	; 39
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	22 60       	ori	r18, 0x02	; 2
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_RED_1);
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	28 e2       	ldi	r18, 0x28	; 40
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	2d 7f       	andi	r18, 0xFD	; 253
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_RED_2);
  dc:	87 e2       	ldi	r24, 0x27	; 39
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	27 e2       	ldi	r18, 0x27	; 39
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	24 60       	ori	r18, 0x04	; 4
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_RED_2);
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	28 e2       	ldi	r18, 0x28	; 40
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	2b 7f       	andi	r18, 0xFB	; 251
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_RED_3);
 100:	87 e2       	ldi	r24, 0x27	; 39
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	27 e2       	ldi	r18, 0x27	; 39
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	28 60       	ori	r18, 0x08	; 8
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_RED_3);
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	28 e2       	ldi	r18, 0x28	; 40
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	27 7f       	andi	r18, 0xF7	; 247
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_RED_4);
 124:	87 e2       	ldi	r24, 0x27	; 39
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	27 e2       	ldi	r18, 0x27	; 39
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 61       	ori	r18, 0x10	; 16
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_RED_4);
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	28 e2       	ldi	r18, 0x28	; 40
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	2f 7e       	andi	r18, 0xEF	; 239
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18

    /* buton */

    DDRD = DDRD & ~(1<<BTN);
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2a e2       	ldi	r18, 0x2A	; 42
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	2e 7f       	andi	r18, 0xFE	; 254
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
    PORTD = PORTD | (1<<BTN);
 15a:	8b e2       	ldi	r24, 0x2B	; 43
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2b e2       	ldi	r18, 0x2B	; 43
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	21 60       	ori	r18, 0x01	; 1
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18

    // Infinite loop
    while (1)
    {

        for(i=0;i<4;i++)
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	8a c0       	rjmp	.+276    	; 0x286 <main+0x206>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	aa e7       	ldi	r26, 0x7A	; 122
 178:	b3 e4       	ldi	r27, 0x43	; 67
 17a:	8b 83       	std	Y+3, r24	; 0x03
 17c:	9c 83       	std	Y+4, r25	; 0x04
 17e:	ad 83       	std	Y+5, r26	; 0x05
 180:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	4a e7       	ldi	r20, 0x7A	; 122
 188:	55 e4       	ldi	r21, 0x45	; 69
 18a:	6b 81       	ldd	r22, Y+3	; 0x03
 18c:	7c 81       	ldd	r23, Y+4	; 0x04
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
 190:	9e 81       	ldd	r25, Y+6	; 0x06
 192:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 196:	dc 01       	movw	r26, r24
 198:	cb 01       	movw	r24, r22
 19a:	8f 83       	std	Y+7, r24	; 0x07
 19c:	98 87       	std	Y+8, r25	; 0x08
 19e:	a9 87       	std	Y+9, r26	; 0x09
 1a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 e8       	ldi	r20, 0x80	; 128
 1a8:	5f e3       	ldi	r21, 0x3F	; 63
 1aa:	6f 81       	ldd	r22, Y+7	; 0x07
 1ac:	78 85       	ldd	r23, Y+8	; 0x08
 1ae:	89 85       	ldd	r24, Y+9	; 0x09
 1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__cmpsf2>
 1b6:	88 23       	and	r24, r24
 1b8:	2c f4       	brge	.+10     	; 0x1c4 <main+0x144>
		__ticks = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	9c 87       	std	Y+12, r25	; 0x0c
 1c0:	8b 87       	std	Y+11, r24	; 0x0b
 1c2:	3f c0       	rjmp	.+126    	; 0x242 <main+0x1c2>
	else if (__tmp > 65535)
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	57 e4       	ldi	r21, 0x47	; 71
 1cc:	6f 81       	ldd	r22, Y+7	; 0x07
 1ce:	78 85       	ldd	r23, Y+8	; 0x08
 1d0:	89 85       	ldd	r24, Y+9	; 0x09
 1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__gesf2>
 1d8:	18 16       	cp	r1, r24
 1da:	4c f5       	brge	.+82     	; 0x22e <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e2       	ldi	r20, 0x20	; 32
 1e2:	51 e4       	ldi	r21, 0x41	; 65
 1e4:	6b 81       	ldd	r22, Y+3	; 0x03
 1e6:	7c 81       	ldd	r23, Y+4	; 0x04
 1e8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ea:	9e 81       	ldd	r25, Y+6	; 0x06
 1ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	bc 01       	movw	r22, r24
 1f6:	cd 01       	movw	r24, r26
 1f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fixunssfsi>
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	9c 87       	std	Y+12, r25	; 0x0c
 202:	8b 87       	std	Y+11, r24	; 0x0b
 204:	0f c0       	rjmp	.+30     	; 0x224 <main+0x1a4>
 206:	80 e9       	ldi	r24, 0x90	; 144
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	9e 87       	std	Y+14, r25	; 0x0e
 20c:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20e:	8d 85       	ldd	r24, Y+13	; 0x0d
 210:	9e 85       	ldd	r25, Y+14	; 0x0e
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x192>
 216:	9e 87       	std	Y+14, r25	; 0x0e
 218:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21a:	8b 85       	ldd	r24, Y+11	; 0x0b
 21c:	9c 85       	ldd	r25, Y+12	; 0x0c
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	9c 87       	std	Y+12, r25	; 0x0c
 222:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	8b 85       	ldd	r24, Y+11	; 0x0b
 226:	9c 85       	ldd	r25, Y+12	; 0x0c
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	69 f7       	brne	.-38     	; 0x206 <main+0x186>
 22c:	14 c0       	rjmp	.+40     	; 0x256 <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 22e:	6f 81       	ldd	r22, Y+7	; 0x07
 230:	78 85       	ldd	r23, Y+8	; 0x08
 232:	89 85       	ldd	r24, Y+9	; 0x09
 234:	9a 85       	ldd	r25, Y+10	; 0x0a
 236:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fixunssfsi>
 23a:	dc 01       	movw	r26, r24
 23c:	cb 01       	movw	r24, r22
 23e:	9c 87       	std	Y+12, r25	; 0x0c
 240:	8b 87       	std	Y+11, r24	; 0x0b
 242:	8b 85       	ldd	r24, Y+11	; 0x0b
 244:	9c 85       	ldd	r25, Y+12	; 0x0c
 246:	98 8b       	std	Y+16, r25	; 0x10
 248:	8f 87       	std	Y+15, r24	; 0x0f
 24a:	8f 85       	ldd	r24, Y+15	; 0x0f
 24c:	98 89       	ldd	r25, Y+16	; 0x10
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0x1ce>
 252:	98 8b       	std	Y+16, r25	; 0x10
 254:	8f 87       	std	Y+15, r24	; 0x0f
        {
            // Pause several milliseconds
            _delay_ms(BLINK_DELAY);

            loop_until_bit_is_clear(PIND, BTN);
 256:	89 e2       	ldi	r24, 0x29	; 41
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	81 70       	andi	r24, 0x01	; 1
 264:	99 27       	eor	r25, r25
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	b1 f7       	brne	.-20     	; 0x256 <main+0x1d6>

            PORTC = PORTC<<1;
 26a:	88 e2       	ldi	r24, 0x28	; 40
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	28 e2       	ldi	r18, 0x28	; 40
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	22 0f       	add	r18, r18
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18

    // Infinite loop
    while (1)
    {

        for(i=0;i<4;i++)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 05       	cpc	r25, r1
 28e:	0c f4       	brge	.+2      	; 0x292 <main+0x212>
 290:	70 cf       	rjmp	.-288    	; 0x172 <main+0xf2>
            loop_until_bit_is_clear(PIND, BTN);

            PORTC = PORTC<<1;
        }

        for(i=0;i<4;i++)
 292:	1a 82       	std	Y+2, r1	; 0x02
 294:	19 82       	std	Y+1, r1	; 0x01
 296:	8a c0       	rjmp	.+276    	; 0x3ac <main+0x32c>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	aa e7       	ldi	r26, 0x7A	; 122
 29e:	b3 e4       	ldi	r27, 0x43	; 67
 2a0:	89 8b       	std	Y+17, r24	; 0x11
 2a2:	9a 8b       	std	Y+18, r25	; 0x12
 2a4:	ab 8b       	std	Y+19, r26	; 0x13
 2a6:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4a e7       	ldi	r20, 0x7A	; 122
 2ae:	55 e4       	ldi	r21, 0x45	; 69
 2b0:	69 89       	ldd	r22, Y+17	; 0x11
 2b2:	7a 89       	ldd	r23, Y+18	; 0x12
 2b4:	8b 89       	ldd	r24, Y+19	; 0x13
 2b6:	9c 89       	ldd	r25, Y+20	; 0x14
 2b8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	8d 8b       	std	Y+21, r24	; 0x15
 2c2:	9e 8b       	std	Y+22, r25	; 0x16
 2c4:	af 8b       	std	Y+23, r26	; 0x17
 2c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e8       	ldi	r20, 0x80	; 128
 2ce:	5f e3       	ldi	r21, 0x3F	; 63
 2d0:	6d 89       	ldd	r22, Y+21	; 0x15
 2d2:	7e 89       	ldd	r23, Y+22	; 0x16
 2d4:	8f 89       	ldd	r24, Y+23	; 0x17
 2d6:	98 8d       	ldd	r25, Y+24	; 0x18
 2d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__cmpsf2>
 2dc:	88 23       	and	r24, r24
 2de:	2c f4       	brge	.+10     	; 0x2ea <main+0x26a>
		__ticks = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9a 8f       	std	Y+26, r25	; 0x1a
 2e6:	89 8f       	std	Y+25, r24	; 0x19
 2e8:	3f c0       	rjmp	.+126    	; 0x368 <main+0x2e8>
	else if (__tmp > 65535)
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	3f ef       	ldi	r19, 0xFF	; 255
 2ee:	4f e7       	ldi	r20, 0x7F	; 127
 2f0:	57 e4       	ldi	r21, 0x47	; 71
 2f2:	6d 89       	ldd	r22, Y+21	; 0x15
 2f4:	7e 89       	ldd	r23, Y+22	; 0x16
 2f6:	8f 89       	ldd	r24, Y+23	; 0x17
 2f8:	98 8d       	ldd	r25, Y+24	; 0x18
 2fa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__gesf2>
 2fe:	18 16       	cp	r1, r24
 300:	4c f5       	brge	.+82     	; 0x354 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e2       	ldi	r20, 0x20	; 32
 308:	51 e4       	ldi	r21, 0x41	; 65
 30a:	69 89       	ldd	r22, Y+17	; 0x11
 30c:	7a 89       	ldd	r23, Y+18	; 0x12
 30e:	8b 89       	ldd	r24, Y+19	; 0x13
 310:	9c 89       	ldd	r25, Y+20	; 0x14
 312:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 316:	dc 01       	movw	r26, r24
 318:	cb 01       	movw	r24, r22
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fixunssfsi>
 322:	dc 01       	movw	r26, r24
 324:	cb 01       	movw	r24, r22
 326:	9a 8f       	std	Y+26, r25	; 0x1a
 328:	89 8f       	std	Y+25, r24	; 0x19
 32a:	0f c0       	rjmp	.+30     	; 0x34a <main+0x2ca>
 32c:	80 e9       	ldi	r24, 0x90	; 144
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	9c 8f       	std	Y+28, r25	; 0x1c
 332:	8b 8f       	std	Y+27, r24	; 0x1b
 334:	8b 8d       	ldd	r24, Y+27	; 0x1b
 336:	9c 8d       	ldd	r25, Y+28	; 0x1c
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x2b8>
 33c:	9c 8f       	std	Y+28, r25	; 0x1c
 33e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 340:	89 8d       	ldd	r24, Y+25	; 0x19
 342:	9a 8d       	ldd	r25, Y+26	; 0x1a
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	9a 8f       	std	Y+26, r25	; 0x1a
 348:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34a:	89 8d       	ldd	r24, Y+25	; 0x19
 34c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	69 f7       	brne	.-38     	; 0x32c <main+0x2ac>
 352:	14 c0       	rjmp	.+40     	; 0x37c <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 354:	6d 89       	ldd	r22, Y+21	; 0x15
 356:	7e 89       	ldd	r23, Y+22	; 0x16
 358:	8f 89       	ldd	r24, Y+23	; 0x17
 35a:	98 8d       	ldd	r25, Y+24	; 0x18
 35c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fixunssfsi>
 360:	dc 01       	movw	r26, r24
 362:	cb 01       	movw	r24, r22
 364:	9a 8f       	std	Y+26, r25	; 0x1a
 366:	89 8f       	std	Y+25, r24	; 0x19
 368:	89 8d       	ldd	r24, Y+25	; 0x19
 36a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 36c:	9e 8f       	std	Y+30, r25	; 0x1e
 36e:	8d 8f       	std	Y+29, r24	; 0x1d
 370:	8d 8d       	ldd	r24, Y+29	; 0x1d
 372:	9e 8d       	ldd	r25, Y+30	; 0x1e
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <main+0x2f4>
 378:	9e 8f       	std	Y+30, r25	; 0x1e
 37a:	8d 8f       	std	Y+29, r24	; 0x1d
        {
            // Pause several milliseconds
            _delay_ms(BLINK_DELAY);

            loop_until_bit_is_clear(PIND, BTN);
 37c:	89 e2       	ldi	r24, 0x29	; 41
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	81 70       	andi	r24, 0x01	; 1
 38a:	99 27       	eor	r25, r25
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	b1 f7       	brne	.-20     	; 0x37c <main+0x2fc>

            PORTC = PORTC>>1;
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	28 e2       	ldi	r18, 0x28	; 40
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	26 95       	lsr	r18
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
            loop_until_bit_is_clear(PIND, BTN);

            PORTC = PORTC<<1;
        }

        for(i=0;i<4;i++)
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	9a 83       	std	Y+2, r25	; 0x02
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	84 30       	cpi	r24, 0x04	; 4
 3b2:	91 05       	cpc	r25, r1
 3b4:	0c f4       	brge	.+2      	; 0x3b8 <main+0x338>
 3b6:	70 cf       	rjmp	.-288    	; 0x298 <main+0x218>

            loop_until_bit_is_clear(PIND, BTN);

            PORTC = PORTC>>1;
       }
    }
 3b8:	d9 ce       	rjmp	.-590    	; 0x16c <main+0xec>

000003ba <__cmpsf2>:
 3ba:	2f d0       	rcall	.+94     	; 0x41a <__fp_cmp>
 3bc:	08 f4       	brcc	.+2      	; 0x3c0 <__cmpsf2+0x6>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	08 95       	ret

000003c2 <__fixunssfsi>:
 3c2:	57 d0       	rcall	.+174    	; 0x472 <__fp_splitA>
 3c4:	88 f0       	brcs	.+34     	; 0x3e8 <__fixunssfsi+0x26>
 3c6:	9f 57       	subi	r25, 0x7F	; 127
 3c8:	90 f0       	brcs	.+36     	; 0x3ee <__fixunssfsi+0x2c>
 3ca:	b9 2f       	mov	r27, r25
 3cc:	99 27       	eor	r25, r25
 3ce:	b7 51       	subi	r27, 0x17	; 23
 3d0:	a0 f0       	brcs	.+40     	; 0x3fa <__fixunssfsi+0x38>
 3d2:	d1 f0       	breq	.+52     	; 0x408 <__fixunssfsi+0x46>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	1a f0       	brmi	.+6      	; 0x3e4 <__fixunssfsi+0x22>
 3de:	ba 95       	dec	r27
 3e0:	c9 f7       	brne	.-14     	; 0x3d4 <__fixunssfsi+0x12>
 3e2:	12 c0       	rjmp	.+36     	; 0x408 <__fixunssfsi+0x46>
 3e4:	b1 30       	cpi	r27, 0x01	; 1
 3e6:	81 f0       	breq	.+32     	; 0x408 <__fixunssfsi+0x46>
 3e8:	5e d0       	rcall	.+188    	; 0x4a6 <__fp_zero>
 3ea:	b1 e0       	ldi	r27, 0x01	; 1
 3ec:	08 95       	ret
 3ee:	5b c0       	rjmp	.+182    	; 0x4a6 <__fp_zero>
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	b8 5f       	subi	r27, 0xF8	; 248
 3f8:	39 f0       	breq	.+14     	; 0x408 <__fixunssfsi+0x46>
 3fa:	b9 3f       	cpi	r27, 0xF9	; 249
 3fc:	cc f3       	brlt	.-14     	; 0x3f0 <__fixunssfsi+0x2e>
 3fe:	86 95       	lsr	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b3 95       	inc	r27
 406:	d9 f7       	brne	.-10     	; 0x3fe <__fixunssfsi+0x3c>
 408:	3e f4       	brtc	.+14     	; 0x418 <__fixunssfsi+0x56>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__fp_cmp>:
 41a:	99 0f       	add	r25, r25
 41c:	00 08       	sbc	r0, r0
 41e:	55 0f       	add	r21, r21
 420:	aa 0b       	sbc	r26, r26
 422:	e0 e8       	ldi	r30, 0x80	; 128
 424:	fe ef       	ldi	r31, 0xFE	; 254
 426:	16 16       	cp	r1, r22
 428:	17 06       	cpc	r1, r23
 42a:	e8 07       	cpc	r30, r24
 42c:	f9 07       	cpc	r31, r25
 42e:	c0 f0       	brcs	.+48     	; 0x460 <__fp_cmp+0x46>
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	e4 07       	cpc	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	98 f0       	brcs	.+38     	; 0x460 <__fp_cmp+0x46>
 43a:	62 1b       	sub	r22, r18
 43c:	73 0b       	sbc	r23, r19
 43e:	84 0b       	sbc	r24, r20
 440:	95 0b       	sbc	r25, r21
 442:	39 f4       	brne	.+14     	; 0x452 <__fp_cmp+0x38>
 444:	0a 26       	eor	r0, r26
 446:	61 f0       	breq	.+24     	; 0x460 <__fp_cmp+0x46>
 448:	23 2b       	or	r18, r19
 44a:	24 2b       	or	r18, r20
 44c:	25 2b       	or	r18, r21
 44e:	21 f4       	brne	.+8      	; 0x458 <__fp_cmp+0x3e>
 450:	08 95       	ret
 452:	0a 26       	eor	r0, r26
 454:	09 f4       	brne	.+2      	; 0x458 <__fp_cmp+0x3e>
 456:	a1 40       	sbci	r26, 0x01	; 1
 458:	a6 95       	lsr	r26
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	81 1d       	adc	r24, r1
 45e:	81 1d       	adc	r24, r1
 460:	08 95       	ret

00000462 <__fp_split3>:
 462:	57 fd       	sbrc	r21, 7
 464:	90 58       	subi	r25, 0x80	; 128
 466:	44 0f       	add	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	59 f0       	breq	.+22     	; 0x482 <__fp_splitA+0x10>
 46c:	5f 3f       	cpi	r21, 0xFF	; 255
 46e:	71 f0       	breq	.+28     	; 0x48c <__fp_splitA+0x1a>
 470:	47 95       	ror	r20

00000472 <__fp_splitA>:
 472:	88 0f       	add	r24, r24
 474:	97 fb       	bst	r25, 7
 476:	99 1f       	adc	r25, r25
 478:	61 f0       	breq	.+24     	; 0x492 <__fp_splitA+0x20>
 47a:	9f 3f       	cpi	r25, 0xFF	; 255
 47c:	79 f0       	breq	.+30     	; 0x49c <__fp_splitA+0x2a>
 47e:	87 95       	ror	r24
 480:	08 95       	ret
 482:	12 16       	cp	r1, r18
 484:	13 06       	cpc	r1, r19
 486:	14 06       	cpc	r1, r20
 488:	55 1f       	adc	r21, r21
 48a:	f2 cf       	rjmp	.-28     	; 0x470 <__fp_split3+0xe>
 48c:	46 95       	lsr	r20
 48e:	f1 df       	rcall	.-30     	; 0x472 <__fp_splitA>
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <__fp_splitA+0x30>
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	18 06       	cpc	r1, r24
 498:	99 1f       	adc	r25, r25
 49a:	f1 cf       	rjmp	.-30     	; 0x47e <__fp_splitA+0xc>
 49c:	86 95       	lsr	r24
 49e:	71 05       	cpc	r23, r1
 4a0:	61 05       	cpc	r22, r1
 4a2:	08 94       	sec
 4a4:	08 95       	ret

000004a6 <__fp_zero>:
 4a6:	e8 94       	clt

000004a8 <__fp_szero>:
 4a8:	bb 27       	eor	r27, r27
 4aa:	66 27       	eor	r22, r22
 4ac:	77 27       	eor	r23, r23
 4ae:	cb 01       	movw	r24, r22
 4b0:	97 f9       	bld	r25, 7
 4b2:	08 95       	ret

000004b4 <__gesf2>:
 4b4:	b2 df       	rcall	.-156    	; 0x41a <__fp_cmp>
 4b6:	08 f4       	brcc	.+2      	; 0x4ba <__gesf2+0x6>
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	08 95       	ret

000004bc <__mulsf3>:
 4bc:	0b d0       	rcall	.+22     	; 0x4d4 <__mulsf3x>
 4be:	78 c0       	rjmp	.+240    	; 0x5b0 <__fp_round>
 4c0:	69 d0       	rcall	.+210    	; 0x594 <__fp_pscA>
 4c2:	28 f0       	brcs	.+10     	; 0x4ce <__mulsf3+0x12>
 4c4:	6e d0       	rcall	.+220    	; 0x5a2 <__fp_pscB>
 4c6:	18 f0       	brcs	.+6      	; 0x4ce <__mulsf3+0x12>
 4c8:	95 23       	and	r25, r21
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__mulsf3+0x12>
 4cc:	5a c0       	rjmp	.+180    	; 0x582 <__fp_inf>
 4ce:	5f c0       	rjmp	.+190    	; 0x58e <__fp_nan>
 4d0:	11 24       	eor	r1, r1
 4d2:	ea cf       	rjmp	.-44     	; 0x4a8 <__fp_szero>

000004d4 <__mulsf3x>:
 4d4:	c6 df       	rcall	.-116    	; 0x462 <__fp_split3>
 4d6:	a0 f3       	brcs	.-24     	; 0x4c0 <__mulsf3+0x4>

000004d8 <__mulsf3_pse>:
 4d8:	95 9f       	mul	r25, r21
 4da:	d1 f3       	breq	.-12     	; 0x4d0 <__mulsf3+0x14>
 4dc:	95 0f       	add	r25, r21
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	55 1f       	adc	r21, r21
 4e2:	62 9f       	mul	r22, r18
 4e4:	f0 01       	movw	r30, r0
 4e6:	72 9f       	mul	r23, r18
 4e8:	bb 27       	eor	r27, r27
 4ea:	f0 0d       	add	r31, r0
 4ec:	b1 1d       	adc	r27, r1
 4ee:	63 9f       	mul	r22, r19
 4f0:	aa 27       	eor	r26, r26
 4f2:	f0 0d       	add	r31, r0
 4f4:	b1 1d       	adc	r27, r1
 4f6:	aa 1f       	adc	r26, r26
 4f8:	64 9f       	mul	r22, r20
 4fa:	66 27       	eor	r22, r22
 4fc:	b0 0d       	add	r27, r0
 4fe:	a1 1d       	adc	r26, r1
 500:	66 1f       	adc	r22, r22
 502:	82 9f       	mul	r24, r18
 504:	22 27       	eor	r18, r18
 506:	b0 0d       	add	r27, r0
 508:	a1 1d       	adc	r26, r1
 50a:	62 1f       	adc	r22, r18
 50c:	73 9f       	mul	r23, r19
 50e:	b0 0d       	add	r27, r0
 510:	a1 1d       	adc	r26, r1
 512:	62 1f       	adc	r22, r18
 514:	83 9f       	mul	r24, r19
 516:	a0 0d       	add	r26, r0
 518:	61 1d       	adc	r22, r1
 51a:	22 1f       	adc	r18, r18
 51c:	74 9f       	mul	r23, r20
 51e:	33 27       	eor	r19, r19
 520:	a0 0d       	add	r26, r0
 522:	61 1d       	adc	r22, r1
 524:	23 1f       	adc	r18, r19
 526:	84 9f       	mul	r24, r20
 528:	60 0d       	add	r22, r0
 52a:	21 1d       	adc	r18, r1
 52c:	82 2f       	mov	r24, r18
 52e:	76 2f       	mov	r23, r22
 530:	6a 2f       	mov	r22, r26
 532:	11 24       	eor	r1, r1
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	50 40       	sbci	r21, 0x00	; 0
 538:	8a f0       	brmi	.+34     	; 0x55c <__mulsf3_pse+0x84>
 53a:	e1 f0       	breq	.+56     	; 0x574 <__mulsf3_pse+0x9c>
 53c:	88 23       	and	r24, r24
 53e:	4a f0       	brmi	.+18     	; 0x552 <__mulsf3_pse+0x7a>
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	bb 1f       	adc	r27, r27
 546:	66 1f       	adc	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	91 50       	subi	r25, 0x01	; 1
 54e:	50 40       	sbci	r21, 0x00	; 0
 550:	a9 f7       	brne	.-22     	; 0x53c <__mulsf3_pse+0x64>
 552:	9e 3f       	cpi	r25, 0xFE	; 254
 554:	51 05       	cpc	r21, r1
 556:	70 f0       	brcs	.+28     	; 0x574 <__mulsf3_pse+0x9c>
 558:	14 c0       	rjmp	.+40     	; 0x582 <__fp_inf>
 55a:	a6 cf       	rjmp	.-180    	; 0x4a8 <__fp_szero>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	ec f3       	brlt	.-6      	; 0x55a <__mulsf3_pse+0x82>
 560:	98 3e       	cpi	r25, 0xE8	; 232
 562:	dc f3       	brlt	.-10     	; 0x55a <__mulsf3_pse+0x82>
 564:	86 95       	lsr	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f7 95       	ror	r31
 56e:	e7 95       	ror	r30
 570:	9f 5f       	subi	r25, 0xFF	; 255
 572:	c1 f7       	brne	.-16     	; 0x564 <__mulsf3_pse+0x8c>
 574:	fe 2b       	or	r31, r30
 576:	88 0f       	add	r24, r24
 578:	91 1d       	adc	r25, r1
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret

00000582 <__fp_inf>:
 582:	97 f9       	bld	r25, 7
 584:	9f 67       	ori	r25, 0x7F	; 127
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	08 95       	ret

0000058e <__fp_nan>:
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	08 95       	ret

00000594 <__fp_pscA>:
 594:	00 24       	eor	r0, r0
 596:	0a 94       	dec	r0
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	18 06       	cpc	r1, r24
 59e:	09 06       	cpc	r0, r25
 5a0:	08 95       	ret

000005a2 <__fp_pscB>:
 5a2:	00 24       	eor	r0, r0
 5a4:	0a 94       	dec	r0
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	05 06       	cpc	r0, r21
 5ae:	08 95       	ret

000005b0 <__fp_round>:
 5b0:	09 2e       	mov	r0, r25
 5b2:	03 94       	inc	r0
 5b4:	00 0c       	add	r0, r0
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0xc>
 5b8:	88 23       	and	r24, r24
 5ba:	52 f0       	brmi	.+20     	; 0x5d0 <__fp_round+0x20>
 5bc:	bb 0f       	add	r27, r27
 5be:	40 f4       	brcc	.+16     	; 0x5d0 <__fp_round+0x20>
 5c0:	bf 2b       	or	r27, r31
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__fp_round+0x18>
 5c4:	60 ff       	sbrs	r22, 0
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__fp_round+0x20>
 5c8:	6f 5f       	subi	r22, 0xFF	; 255
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
