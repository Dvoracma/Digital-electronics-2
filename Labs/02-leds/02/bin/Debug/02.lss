
bin/Debug/02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000004d7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000004e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a8  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a3  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011c  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/**
 * Main function where the program execution begins. Toggle two LEDs
 * when a push button is pressed.
 */
int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2e 97       	sbiw	r28, 0x0e	; 14
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	24 e2       	ldi	r18, 0x24	; 36
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	20 62       	ori	r18, 0x20	; 32
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  a6:	85 e2       	ldi	r24, 0x25	; 37
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	25 e2       	ldi	r18, 0x25	; 37
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	2f 7d       	andi	r18, 0xDF	; 223
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18

    /* second LED */
    DDRC = DDRC | (1<<LED_RED);
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	27 e2       	ldi	r18, 0x27	; 39
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	21 60       	ori	r18, 0x01	; 1
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
    PORTC = PORTC & ~(1<<LED_RED);
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	28 e2       	ldi	r18, 0x28	; 40
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	2e 7f       	andi	r18, 0xFE	; 254
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18

    /* buton */

    DDRD = DDRD & ~(1<<BTN);
  dc:	8a e2       	ldi	r24, 0x2A	; 42
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2a e2       	ldi	r18, 0x2A	; 42
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	2e 7f       	andi	r18, 0xFE	; 254
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
    PORTD = PORTD | (1<<BTN);
  ee:	8b e2       	ldi	r24, 0x2B	; 43
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2b e2       	ldi	r18, 0x2B	; 43
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	21 60       	ori	r18, 0x01	; 1
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	aa e7       	ldi	r26, 0x7A	; 122
 106:	b3 e4       	ldi	r27, 0x43	; 67
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	ab 83       	std	Y+3, r26	; 0x03
 10e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	4a e7       	ldi	r20, 0x7A	; 122
 116:	55 e4       	ldi	r21, 0x45	; 69
 118:	69 81       	ldd	r22, Y+1	; 0x01
 11a:	7a 81       	ldd	r23, Y+2	; 0x02
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	0e 94 93 01 	call	0x326	; 0x326 <__mulsf3>
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	8d 83       	std	Y+5, r24	; 0x05
 12a:	9e 83       	std	Y+6, r25	; 0x06
 12c:	af 83       	std	Y+7, r26	; 0x07
 12e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e8       	ldi	r20, 0x80	; 128
 136:	5f e3       	ldi	r21, 0x3F	; 63
 138:	6d 81       	ldd	r22, Y+5	; 0x05
 13a:	7e 81       	ldd	r23, Y+6	; 0x06
 13c:	8f 81       	ldd	r24, Y+7	; 0x07
 13e:	98 85       	ldd	r25, Y+8	; 0x08
 140:	0e 94 12 01 	call	0x224	; 0x224 <__cmpsf2>
 144:	88 23       	and	r24, r24
 146:	2c f4       	brge	.+10     	; 0x152 <main+0xd2>
		__ticks = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9a 87       	std	Y+10, r25	; 0x0a
 14e:	89 87       	std	Y+9, r24	; 0x09
 150:	3f c0       	rjmp	.+126    	; 0x1d0 <main+0x150>
	else if (__tmp > 65535)
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	3f ef       	ldi	r19, 0xFF	; 255
 156:	4f e7       	ldi	r20, 0x7F	; 127
 158:	57 e4       	ldi	r21, 0x47	; 71
 15a:	6d 81       	ldd	r22, Y+5	; 0x05
 15c:	7e 81       	ldd	r23, Y+6	; 0x06
 15e:	8f 81       	ldd	r24, Y+7	; 0x07
 160:	98 85       	ldd	r25, Y+8	; 0x08
 162:	0e 94 8f 01 	call	0x31e	; 0x31e <__gesf2>
 166:	18 16       	cp	r1, r24
 168:	4c f5       	brge	.+82     	; 0x1bc <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e2       	ldi	r20, 0x20	; 32
 170:	51 e4       	ldi	r21, 0x41	; 65
 172:	69 81       	ldd	r22, Y+1	; 0x01
 174:	7a 81       	ldd	r23, Y+2	; 0x02
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	0e 94 93 01 	call	0x326	; 0x326 <__mulsf3>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	bc 01       	movw	r22, r24
 184:	cd 01       	movw	r24, r26
 186:	0e 94 16 01 	call	0x22c	; 0x22c <__fixunssfsi>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	9a 87       	std	Y+10, r25	; 0x0a
 190:	89 87       	std	Y+9, r24	; 0x09
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <main+0x132>
 194:	80 e9       	ldi	r24, 0x90	; 144
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9c 87       	std	Y+12, r25	; 0x0c
 19a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19c:	8b 85       	ldd	r24, Y+11	; 0x0b
 19e:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x120>
 1a4:	9c 87       	std	Y+12, r25	; 0x0c
 1a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a8:	89 85       	ldd	r24, Y+9	; 0x09
 1aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	9a 87       	std	Y+10, r25	; 0x0a
 1b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	89 85       	ldd	r24, Y+9	; 0x09
 1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	69 f7       	brne	.-38     	; 0x194 <main+0x114>
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1bc:	6d 81       	ldd	r22, Y+5	; 0x05
 1be:	7e 81       	ldd	r23, Y+6	; 0x06
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	98 85       	ldd	r25, Y+8	; 0x08
 1c4:	0e 94 16 01 	call	0x22c	; 0x22c <__fixunssfsi>
 1c8:	dc 01       	movw	r26, r24
 1ca:	cb 01       	movw	r24, r22
 1cc:	9a 87       	std	Y+10, r25	; 0x0a
 1ce:	89 87       	std	Y+9, r24	; 0x09
 1d0:	89 85       	ldd	r24, Y+9	; 0x09
 1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d4:	9e 87       	std	Y+14, r25	; 0x0e
 1d6:	8d 87       	std	Y+13, r24	; 0x0d
 1d8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1da:	9e 85       	ldd	r25, Y+14	; 0x0e
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x15c>
 1e0:	9e 87       	std	Y+14, r25	; 0x0e
 1e2:	8d 87       	std	Y+13, r24	; 0x0d
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        if(bit_is_clear(PIND, BTN))
 1e4:	89 e2       	ldi	r24, 0x29	; 41
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	81 70       	andi	r24, 0x01	; 1
 1f2:	99 27       	eor	r25, r25
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	a9 f4       	brne	.+42     	; 0x222 <main+0x1a2>
        {


        PORTB = PORTB ^ (1<<LED_GREEN);
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	25 e2       	ldi	r18, 0x25	; 37
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	30 81       	ld	r19, Z
 204:	20 e2       	ldi	r18, 0x20	; 32
 206:	23 27       	eor	r18, r19
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
        PORTC = PORTC ^ (1<<LED_RED);
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	28 e2       	ldi	r18, 0x28	; 40
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	30 81       	ld	r19, Z
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	23 27       	eor	r18, r19
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
        }
    }
 220:	6f cf       	rjmp	.-290    	; 0x100 <main+0x80>
 222:	6e cf       	rjmp	.-292    	; 0x100 <main+0x80>

00000224 <__cmpsf2>:
 224:	2f d0       	rcall	.+94     	; 0x284 <__fp_cmp>
 226:	08 f4       	brcc	.+2      	; 0x22a <__cmpsf2+0x6>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	08 95       	ret

0000022c <__fixunssfsi>:
 22c:	57 d0       	rcall	.+174    	; 0x2dc <__fp_splitA>
 22e:	88 f0       	brcs	.+34     	; 0x252 <__fixunssfsi+0x26>
 230:	9f 57       	subi	r25, 0x7F	; 127
 232:	90 f0       	brcs	.+36     	; 0x258 <__fixunssfsi+0x2c>
 234:	b9 2f       	mov	r27, r25
 236:	99 27       	eor	r25, r25
 238:	b7 51       	subi	r27, 0x17	; 23
 23a:	a0 f0       	brcs	.+40     	; 0x264 <__fixunssfsi+0x38>
 23c:	d1 f0       	breq	.+52     	; 0x272 <__fixunssfsi+0x46>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	88 1f       	adc	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	1a f0       	brmi	.+6      	; 0x24e <__fixunssfsi+0x22>
 248:	ba 95       	dec	r27
 24a:	c9 f7       	brne	.-14     	; 0x23e <__fixunssfsi+0x12>
 24c:	12 c0       	rjmp	.+36     	; 0x272 <__fixunssfsi+0x46>
 24e:	b1 30       	cpi	r27, 0x01	; 1
 250:	81 f0       	breq	.+32     	; 0x272 <__fixunssfsi+0x46>
 252:	5e d0       	rcall	.+188    	; 0x310 <__fp_zero>
 254:	b1 e0       	ldi	r27, 0x01	; 1
 256:	08 95       	ret
 258:	5b c0       	rjmp	.+182    	; 0x310 <__fp_zero>
 25a:	67 2f       	mov	r22, r23
 25c:	78 2f       	mov	r23, r24
 25e:	88 27       	eor	r24, r24
 260:	b8 5f       	subi	r27, 0xF8	; 248
 262:	39 f0       	breq	.+14     	; 0x272 <__fixunssfsi+0x46>
 264:	b9 3f       	cpi	r27, 0xF9	; 249
 266:	cc f3       	brlt	.-14     	; 0x25a <__fixunssfsi+0x2e>
 268:	86 95       	lsr	r24
 26a:	77 95       	ror	r23
 26c:	67 95       	ror	r22
 26e:	b3 95       	inc	r27
 270:	d9 f7       	brne	.-10     	; 0x268 <__fixunssfsi+0x3c>
 272:	3e f4       	brtc	.+14     	; 0x282 <__fixunssfsi+0x56>
 274:	90 95       	com	r25
 276:	80 95       	com	r24
 278:	70 95       	com	r23
 27a:	61 95       	neg	r22
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	8f 4f       	sbci	r24, 0xFF	; 255
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	08 95       	ret

00000284 <__fp_cmp>:
 284:	99 0f       	add	r25, r25
 286:	00 08       	sbc	r0, r0
 288:	55 0f       	add	r21, r21
 28a:	aa 0b       	sbc	r26, r26
 28c:	e0 e8       	ldi	r30, 0x80	; 128
 28e:	fe ef       	ldi	r31, 0xFE	; 254
 290:	16 16       	cp	r1, r22
 292:	17 06       	cpc	r1, r23
 294:	e8 07       	cpc	r30, r24
 296:	f9 07       	cpc	r31, r25
 298:	c0 f0       	brcs	.+48     	; 0x2ca <__fp_cmp+0x46>
 29a:	12 16       	cp	r1, r18
 29c:	13 06       	cpc	r1, r19
 29e:	e4 07       	cpc	r30, r20
 2a0:	f5 07       	cpc	r31, r21
 2a2:	98 f0       	brcs	.+38     	; 0x2ca <__fp_cmp+0x46>
 2a4:	62 1b       	sub	r22, r18
 2a6:	73 0b       	sbc	r23, r19
 2a8:	84 0b       	sbc	r24, r20
 2aa:	95 0b       	sbc	r25, r21
 2ac:	39 f4       	brne	.+14     	; 0x2bc <__fp_cmp+0x38>
 2ae:	0a 26       	eor	r0, r26
 2b0:	61 f0       	breq	.+24     	; 0x2ca <__fp_cmp+0x46>
 2b2:	23 2b       	or	r18, r19
 2b4:	24 2b       	or	r18, r20
 2b6:	25 2b       	or	r18, r21
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <__fp_cmp+0x3e>
 2ba:	08 95       	ret
 2bc:	0a 26       	eor	r0, r26
 2be:	09 f4       	brne	.+2      	; 0x2c2 <__fp_cmp+0x3e>
 2c0:	a1 40       	sbci	r26, 0x01	; 1
 2c2:	a6 95       	lsr	r26
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	81 1d       	adc	r24, r1
 2c8:	81 1d       	adc	r24, r1
 2ca:	08 95       	ret

000002cc <__fp_split3>:
 2cc:	57 fd       	sbrc	r21, 7
 2ce:	90 58       	subi	r25, 0x80	; 128
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	59 f0       	breq	.+22     	; 0x2ec <__fp_splitA+0x10>
 2d6:	5f 3f       	cpi	r21, 0xFF	; 255
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <__fp_splitA+0x1a>
 2da:	47 95       	ror	r20

000002dc <__fp_splitA>:
 2dc:	88 0f       	add	r24, r24
 2de:	97 fb       	bst	r25, 7
 2e0:	99 1f       	adc	r25, r25
 2e2:	61 f0       	breq	.+24     	; 0x2fc <__fp_splitA+0x20>
 2e4:	9f 3f       	cpi	r25, 0xFF	; 255
 2e6:	79 f0       	breq	.+30     	; 0x306 <__fp_splitA+0x2a>
 2e8:	87 95       	ror	r24
 2ea:	08 95       	ret
 2ec:	12 16       	cp	r1, r18
 2ee:	13 06       	cpc	r1, r19
 2f0:	14 06       	cpc	r1, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	f2 cf       	rjmp	.-28     	; 0x2da <__fp_split3+0xe>
 2f6:	46 95       	lsr	r20
 2f8:	f1 df       	rcall	.-30     	; 0x2dc <__fp_splitA>
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <__fp_splitA+0x30>
 2fc:	16 16       	cp	r1, r22
 2fe:	17 06       	cpc	r1, r23
 300:	18 06       	cpc	r1, r24
 302:	99 1f       	adc	r25, r25
 304:	f1 cf       	rjmp	.-30     	; 0x2e8 <__fp_splitA+0xc>
 306:	86 95       	lsr	r24
 308:	71 05       	cpc	r23, r1
 30a:	61 05       	cpc	r22, r1
 30c:	08 94       	sec
 30e:	08 95       	ret

00000310 <__fp_zero>:
 310:	e8 94       	clt

00000312 <__fp_szero>:
 312:	bb 27       	eor	r27, r27
 314:	66 27       	eor	r22, r22
 316:	77 27       	eor	r23, r23
 318:	cb 01       	movw	r24, r22
 31a:	97 f9       	bld	r25, 7
 31c:	08 95       	ret

0000031e <__gesf2>:
 31e:	b2 df       	rcall	.-156    	; 0x284 <__fp_cmp>
 320:	08 f4       	brcc	.+2      	; 0x324 <__gesf2+0x6>
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	08 95       	ret

00000326 <__mulsf3>:
 326:	0b d0       	rcall	.+22     	; 0x33e <__mulsf3x>
 328:	78 c0       	rjmp	.+240    	; 0x41a <__fp_round>
 32a:	69 d0       	rcall	.+210    	; 0x3fe <__fp_pscA>
 32c:	28 f0       	brcs	.+10     	; 0x338 <__mulsf3+0x12>
 32e:	6e d0       	rcall	.+220    	; 0x40c <__fp_pscB>
 330:	18 f0       	brcs	.+6      	; 0x338 <__mulsf3+0x12>
 332:	95 23       	and	r25, r21
 334:	09 f0       	breq	.+2      	; 0x338 <__mulsf3+0x12>
 336:	5a c0       	rjmp	.+180    	; 0x3ec <__fp_inf>
 338:	5f c0       	rjmp	.+190    	; 0x3f8 <__fp_nan>
 33a:	11 24       	eor	r1, r1
 33c:	ea cf       	rjmp	.-44     	; 0x312 <__fp_szero>

0000033e <__mulsf3x>:
 33e:	c6 df       	rcall	.-116    	; 0x2cc <__fp_split3>
 340:	a0 f3       	brcs	.-24     	; 0x32a <__mulsf3+0x4>

00000342 <__mulsf3_pse>:
 342:	95 9f       	mul	r25, r21
 344:	d1 f3       	breq	.-12     	; 0x33a <__mulsf3+0x14>
 346:	95 0f       	add	r25, r21
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	55 1f       	adc	r21, r21
 34c:	62 9f       	mul	r22, r18
 34e:	f0 01       	movw	r30, r0
 350:	72 9f       	mul	r23, r18
 352:	bb 27       	eor	r27, r27
 354:	f0 0d       	add	r31, r0
 356:	b1 1d       	adc	r27, r1
 358:	63 9f       	mul	r22, r19
 35a:	aa 27       	eor	r26, r26
 35c:	f0 0d       	add	r31, r0
 35e:	b1 1d       	adc	r27, r1
 360:	aa 1f       	adc	r26, r26
 362:	64 9f       	mul	r22, r20
 364:	66 27       	eor	r22, r22
 366:	b0 0d       	add	r27, r0
 368:	a1 1d       	adc	r26, r1
 36a:	66 1f       	adc	r22, r22
 36c:	82 9f       	mul	r24, r18
 36e:	22 27       	eor	r18, r18
 370:	b0 0d       	add	r27, r0
 372:	a1 1d       	adc	r26, r1
 374:	62 1f       	adc	r22, r18
 376:	73 9f       	mul	r23, r19
 378:	b0 0d       	add	r27, r0
 37a:	a1 1d       	adc	r26, r1
 37c:	62 1f       	adc	r22, r18
 37e:	83 9f       	mul	r24, r19
 380:	a0 0d       	add	r26, r0
 382:	61 1d       	adc	r22, r1
 384:	22 1f       	adc	r18, r18
 386:	74 9f       	mul	r23, r20
 388:	33 27       	eor	r19, r19
 38a:	a0 0d       	add	r26, r0
 38c:	61 1d       	adc	r22, r1
 38e:	23 1f       	adc	r18, r19
 390:	84 9f       	mul	r24, r20
 392:	60 0d       	add	r22, r0
 394:	21 1d       	adc	r18, r1
 396:	82 2f       	mov	r24, r18
 398:	76 2f       	mov	r23, r22
 39a:	6a 2f       	mov	r22, r26
 39c:	11 24       	eor	r1, r1
 39e:	9f 57       	subi	r25, 0x7F	; 127
 3a0:	50 40       	sbci	r21, 0x00	; 0
 3a2:	8a f0       	brmi	.+34     	; 0x3c6 <__mulsf3_pse+0x84>
 3a4:	e1 f0       	breq	.+56     	; 0x3de <__mulsf3_pse+0x9c>
 3a6:	88 23       	and	r24, r24
 3a8:	4a f0       	brmi	.+18     	; 0x3bc <__mulsf3_pse+0x7a>
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	bb 1f       	adc	r27, r27
 3b0:	66 1f       	adc	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	91 50       	subi	r25, 0x01	; 1
 3b8:	50 40       	sbci	r21, 0x00	; 0
 3ba:	a9 f7       	brne	.-22     	; 0x3a6 <__mulsf3_pse+0x64>
 3bc:	9e 3f       	cpi	r25, 0xFE	; 254
 3be:	51 05       	cpc	r21, r1
 3c0:	70 f0       	brcs	.+28     	; 0x3de <__mulsf3_pse+0x9c>
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <__fp_inf>
 3c4:	a6 cf       	rjmp	.-180    	; 0x312 <__fp_szero>
 3c6:	5f 3f       	cpi	r21, 0xFF	; 255
 3c8:	ec f3       	brlt	.-6      	; 0x3c4 <__mulsf3_pse+0x82>
 3ca:	98 3e       	cpi	r25, 0xE8	; 232
 3cc:	dc f3       	brlt	.-10     	; 0x3c4 <__mulsf3_pse+0x82>
 3ce:	86 95       	lsr	r24
 3d0:	77 95       	ror	r23
 3d2:	67 95       	ror	r22
 3d4:	b7 95       	ror	r27
 3d6:	f7 95       	ror	r31
 3d8:	e7 95       	ror	r30
 3da:	9f 5f       	subi	r25, 0xFF	; 255
 3dc:	c1 f7       	brne	.-16     	; 0x3ce <__mulsf3_pse+0x8c>
 3de:	fe 2b       	or	r31, r30
 3e0:	88 0f       	add	r24, r24
 3e2:	91 1d       	adc	r25, r1
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	97 f9       	bld	r25, 7
 3ea:	08 95       	ret

000003ec <__fp_inf>:
 3ec:	97 f9       	bld	r25, 7
 3ee:	9f 67       	ori	r25, 0x7F	; 127
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	08 95       	ret

000003f8 <__fp_nan>:
 3f8:	9f ef       	ldi	r25, 0xFF	; 255
 3fa:	80 ec       	ldi	r24, 0xC0	; 192
 3fc:	08 95       	ret

000003fe <__fp_pscA>:
 3fe:	00 24       	eor	r0, r0
 400:	0a 94       	dec	r0
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	18 06       	cpc	r1, r24
 408:	09 06       	cpc	r0, r25
 40a:	08 95       	ret

0000040c <__fp_pscB>:
 40c:	00 24       	eor	r0, r0
 40e:	0a 94       	dec	r0
 410:	12 16       	cp	r1, r18
 412:	13 06       	cpc	r1, r19
 414:	14 06       	cpc	r1, r20
 416:	05 06       	cpc	r0, r21
 418:	08 95       	ret

0000041a <__fp_round>:
 41a:	09 2e       	mov	r0, r25
 41c:	03 94       	inc	r0
 41e:	00 0c       	add	r0, r0
 420:	11 f4       	brne	.+4      	; 0x426 <__fp_round+0xc>
 422:	88 23       	and	r24, r24
 424:	52 f0       	brmi	.+20     	; 0x43a <__fp_round+0x20>
 426:	bb 0f       	add	r27, r27
 428:	40 f4       	brcc	.+16     	; 0x43a <__fp_round+0x20>
 42a:	bf 2b       	or	r27, r31
 42c:	11 f4       	brne	.+4      	; 0x432 <__fp_round+0x18>
 42e:	60 ff       	sbrs	r22, 0
 430:	04 c0       	rjmp	.+8      	; 0x43a <__fp_round+0x20>
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
